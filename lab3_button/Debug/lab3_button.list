
lab3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080028fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  0800290c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  0800290c  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d07  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fcc  00000000  00000000  00029d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  0002bd10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  0002c7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001720e  00000000  00000000  0002d198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce90  00000000  00000000  000443a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824a2  00000000  00000000  00051236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d36d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a58  00000000  00000000  000d372c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080028b8 	.word	0x080028b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080028b8 	.word	0x080028b8

0800014c <init_button_state>:
/*Initial button state
 * input: none
 * output: none
 * */
void init_button_state()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_BUTTON; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e01f      	b.n	8000198 <init_button_state+0x4c>
	{
		button[i].bState[0] = GPIO_PIN_SET;
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a14      	ldr	r2, [pc, #80]	; (80001ac <init_button_state+0x60>)
 800015c:	2101      	movs	r1, #1
 800015e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		button[i].bState[1] = GPIO_PIN_SET;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	4a11      	ldr	r2, [pc, #68]	; (80001ac <init_button_state+0x60>)
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	4413      	add	r3, r2
 800016a:	2201      	movs	r2, #1
 800016c:	705a      	strb	r2, [r3, #1]
		button[i].bState[2] = GPIO_PIN_SET;
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	4a0e      	ldr	r2, [pc, #56]	; (80001ac <init_button_state+0x60>)
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	2201      	movs	r2, #1
 8000178:	709a      	strb	r2, [r3, #2]
		button[i].bState[3] = GPIO_PIN_SET;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	4a0b      	ldr	r2, [pc, #44]	; (80001ac <init_button_state+0x60>)
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4413      	add	r3, r2
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]

		counter[i] = PRESS_TIME;
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <init_button_state+0x64>)
 800018a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < MAX_BUTTON; i++)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	3301      	adds	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	2b02      	cmp	r3, #2
 800019c:	d9dc      	bls.n	8000158 <init_button_state+0xc>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	20000098 	.word	0x20000098

080001b4 <checkState>:
 * Check 3 nearest state of index button
 * input: index of button
 * output: state of button
 * */
uint8_t checkState(uint8_t idx)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	if (button[idx].bState[1] == GPIO_PIN_RESET && button[idx].bState[2] == GPIO_PIN_RESET && button[idx].bState[3] == GPIO_PIN_RESET)
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4a0d      	ldr	r2, [pc, #52]	; (80001f8 <checkState+0x44>)
 80001c2:	009b      	lsls	r3, r3, #2
 80001c4:	4413      	add	r3, r2
 80001c6:	785b      	ldrb	r3, [r3, #1]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d10f      	bne.n	80001ec <checkState+0x38>
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <checkState+0x44>)
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	4413      	add	r3, r2
 80001d4:	789b      	ldrb	r3, [r3, #2]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d108      	bne.n	80001ec <checkState+0x38>
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <checkState+0x44>)
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	4413      	add	r3, r2
 80001e2:	78db      	ldrb	r3, [r3, #3]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <checkState+0x38>
		return GPIO_PIN_RESET;
 80001e8:	2300      	movs	r3, #0
 80001ea:	e000      	b.n	80001ee <checkState+0x3a>
	return GPIO_PIN_SET;
 80001ec:	2301      	movs	r3, #1
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	2000008c 	.word	0x2000008c

080001fc <isPressed>:

uint8_t isPressed(uint8_t idx)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	if (bFlag[idx] == 1)
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <isPressed+0x2c>)
 800020a:	5cd3      	ldrb	r3, [r2, r3]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d105      	bne.n	800021c <isPressed+0x20>
	{
		bFlag[idx] = 0;
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a05      	ldr	r2, [pc, #20]	; (8000228 <isPressed+0x2c>)
 8000214:	2100      	movs	r1, #0
 8000216:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000218:	2301      	movs	r3, #1
 800021a:	e000      	b.n	800021e <isPressed+0x22>
	}
	return 0;
 800021c:	2300      	movs	r3, #0
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	2000002c 	.word	0x2000002c

0800022c <isLongPressed>:

uint8_t isLongPressed(uint8_t idx)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
	if (bLongFlag[idx] == 1)
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a07      	ldr	r2, [pc, #28]	; (8000258 <isLongPressed+0x2c>)
 800023a:	5cd3      	ldrb	r3, [r2, r3]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d105      	bne.n	800024c <isLongPressed+0x20>
	{
		bLongFlag[idx] = 0;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a05      	ldr	r2, [pc, #20]	; (8000258 <isLongPressed+0x2c>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <isLongPressed+0x22>
	}
	return 0;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000030 	.word	0x20000030

0800025c <getKey>:
 * Get input key
 * input: index of button
 * output: none
 * */
void getKey(uint8_t idx)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	button[idx].bState[1] = button[idx].bState[2];
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	79fa      	ldrb	r2, [r7, #7]
 800026a:	4936      	ldr	r1, [pc, #216]	; (8000344 <getKey+0xe8>)
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	7898      	ldrb	r0, [r3, #2]
 8000272:	4934      	ldr	r1, [pc, #208]	; (8000344 <getKey+0xe8>)
 8000274:	0093      	lsls	r3, r2, #2
 8000276:	440b      	add	r3, r1
 8000278:	4602      	mov	r2, r0
 800027a:	705a      	strb	r2, [r3, #1]
	button[idx].bState[2] = button[idx].bState[3];
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	4930      	ldr	r1, [pc, #192]	; (8000344 <getKey+0xe8>)
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	440b      	add	r3, r1
 8000286:	78d8      	ldrb	r0, [r3, #3]
 8000288:	492e      	ldr	r1, [pc, #184]	; (8000344 <getKey+0xe8>)
 800028a:	0093      	lsls	r3, r2, #2
 800028c:	440b      	add	r3, r1
 800028e:	4602      	mov	r2, r0
 8000290:	709a      	strb	r2, [r3, #2]
	button[idx].bState[3] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin << idx);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	b29b      	uxth	r3, r3
 800029e:	79fc      	ldrb	r4, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	4829      	ldr	r0, [pc, #164]	; (8000348 <getKey+0xec>)
 80002a4:	f001 fad0 	bl	8001848 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4619      	mov	r1, r3
 80002ac:	4a25      	ldr	r2, [pc, #148]	; (8000344 <getKey+0xe8>)
 80002ae:	00a3      	lsls	r3, r4, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	460a      	mov	r2, r1
 80002b4:	70da      	strb	r2, [r3, #3]
	if (checkState(idx) == RESET)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff7b 	bl	80001b4 <checkState>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d12f      	bne.n	8000324 <getKey+0xc8>
	{
		if (button[idx].bState[0] == GPIO_PIN_SET)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4a1f      	ldr	r2, [pc, #124]	; (8000344 <getKey+0xe8>)
 80002c8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d10f      	bne.n	80002f0 <getKey+0x94>
		{
			// Debounced button
			bFlag[idx] = 1;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <getKey+0xf0>)
 80002d4:	2101      	movs	r1, #1
 80002d6:	54d1      	strb	r1, [r2, r3]
			button[idx].bState[0] = GPIO_PIN_RESET;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <getKey+0xe8>)
 80002dc:	2100      	movs	r1, #0
 80002de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			counter[idx] = PRESS_TIME;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <getKey+0xf4>)
 80002e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	else
	{
		button[idx].bState[0] = GPIO_PIN_SET;
		counter[idx] = PRESS_TIME;
	}
}
 80002ee:	e024      	b.n	800033a <getKey+0xde>
			if (counter[idx] == 0)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a17      	ldr	r2, [pc, #92]	; (8000350 <getKey+0xf4>)
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10a      	bne.n	8000312 <getKey+0xb6>
				bLongFlag[idx] = 1;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a15      	ldr	r2, [pc, #84]	; (8000354 <getKey+0xf8>)
 8000300:	2101      	movs	r1, #1
 8000302:	54d1      	strb	r1, [r2, r3]
				counter[idx] = PRESS_TIME;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4a12      	ldr	r2, [pc, #72]	; (8000350 <getKey+0xf4>)
 8000308:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800030c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000310:	e013      	b.n	800033a <getKey+0xde>
				counter[idx]--;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <getKey+0xf4>)
 8000316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031a:	3a01      	subs	r2, #1
 800031c:	490c      	ldr	r1, [pc, #48]	; (8000350 <getKey+0xf4>)
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000322:	e00a      	b.n	800033a <getKey+0xde>
		button[idx].bState[0] = GPIO_PIN_SET;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <getKey+0xe8>)
 8000328:	2101      	movs	r1, #1
 800032a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		counter[idx] = PRESS_TIME;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <getKey+0xf4>)
 8000332:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	bf00      	nop
 8000344:	2000008c 	.word	0x2000008c
 8000348:	40010c00 	.word	0x40010c00
 800034c:	2000002c 	.word	0x2000002c
 8000350:	20000098 	.word	0x20000098
 8000354:	20000030 	.word	0x20000030

08000358 <display7seg>:
 * Display number on 7-segment led
 * input: number range 0-9
 * output: none
 * */
void display7seg(uint8_t num)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b09      	cmp	r3, #9
 8000366:	f200 8093 	bhi.w	8000490 <display7seg+0x138>
 800036a:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <display7seg+0x18>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000399 	.word	0x08000399
 8000374:	080003b3 	.word	0x080003b3
 8000378:	080003cd 	.word	0x080003cd
 800037c:	080003e7 	.word	0x080003e7
 8000380:	08000401 	.word	0x08000401
 8000384:	0800041b 	.word	0x0800041b
 8000388:	08000435 	.word	0x08000435
 800038c:	0800044f 	.word	0x0800044f
 8000390:	08000469 	.word	0x08000469
 8000394:	08000477 	.word	0x08000477
	{
	case 0:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800039e:	4842      	ldr	r0, [pc, #264]	; (80004a8 <display7seg+0x150>)
 80003a0:	f001 fa69 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG6_Pin, SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	483f      	ldr	r0, [pc, #252]	; (80004a8 <display7seg+0x150>)
 80003ac:	f001 fa63 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 80003b0:	e075      	b.n	800049e <display7seg+0x146>
	case 1:
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003b8:	483b      	ldr	r0, [pc, #236]	; (80004a8 <display7seg+0x150>)
 80003ba:	f001 fa5c 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 80003c4:	4838      	ldr	r0, [pc, #224]	; (80004a8 <display7seg+0x150>)
 80003c6:	f001 fa56 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 80003ca:	e068      	b.n	800049e <display7seg+0x146>
	case 2:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin|SEG6_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80003d2:	4835      	ldr	r0, [pc, #212]	; (80004a8 <display7seg+0x150>)
 80003d4:	f001 fa4f 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG2_Pin|SEG5_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80003de:	4832      	ldr	r0, [pc, #200]	; (80004a8 <display7seg+0x150>)
 80003e0:	f001 fa49 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 80003e4:	e05b      	b.n	800049e <display7seg+0x146>
	case 3:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG6_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 80003ec:	482e      	ldr	r0, [pc, #184]	; (80004a8 <display7seg+0x150>)
 80003ee:	f001 fa42 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_Pin|SEG5_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80003f8:	482b      	ldr	r0, [pc, #172]	; (80004a8 <display7seg+0x150>)
 80003fa:	f001 fa3c 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 80003fe:	e04e      	b.n	800049e <display7seg+0x146>
	case 4:
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000406:	4828      	ldr	r0, [pc, #160]	; (80004a8 <display7seg+0x150>)
 8000408:	f001 fa35 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG3_Pin|SEG4_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000412:	4825      	ldr	r0, [pc, #148]	; (80004a8 <display7seg+0x150>)
 8000414:	f001 fa2f 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 8000418:	e041      	b.n	800049e <display7seg+0x146>
	case 5:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000420:	4821      	ldr	r0, [pc, #132]	; (80004a8 <display7seg+0x150>)
 8000422:	f001 fa28 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG4_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800042c:	481e      	ldr	r0, [pc, #120]	; (80004a8 <display7seg+0x150>)
 800042e:	f001 fa22 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 8000432:	e034      	b.n	800049e <display7seg+0x146>
	case 6:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800043a:	481b      	ldr	r0, [pc, #108]	; (80004a8 <display7seg+0x150>)
 800043c:	f001 fa1b 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4818      	ldr	r0, [pc, #96]	; (80004a8 <display7seg+0x150>)
 8000448:	f001 fa15 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 800044c:	e027      	b.n	800049e <display7seg+0x146>
	case 7:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <display7seg+0x150>)
 8000456:	f001 fa0e 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000460:	4811      	ldr	r0, [pc, #68]	; (80004a8 <display7seg+0x150>)
 8000462:	f001 fa08 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 8000466:	e01a      	b.n	800049e <display7seg+0x146>
	case 8:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <display7seg+0x150>)
 8000470:	f001 fa01 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 8000474:	e013      	b.n	800049e <display7seg+0x146>
	case 9:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <display7seg+0x150>)
 800047e:	f001 f9fa 	bl	8001876 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000488:	4807      	ldr	r0, [pc, #28]	; (80004a8 <display7seg+0x150>)
 800048a:	f001 f9f4 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 800048e:	e006      	b.n	800049e <display7seg+0x146>
	default:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <display7seg+0x150>)
 8000498:	f001 f9ed 	bl	8001876 <HAL_GPIO_WritePin>
		break;
 800049c:	bf00      	nop
	}
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010800 	.word	0x40010800

080004ac <displayVertical>:
 * Display number on vertical 7-segment led
 * input: number range 0-99
 * output: none
 * */
void displayVertical(uint8_t num)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	if (num > 99)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b63      	cmp	r3, #99	; 0x63
 80004ba:	d815      	bhi.n	80004e8 <displayVertical+0x3c>
		return;
	buffer[1][1] = num % 10;
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <displayVertical+0x48>)
 80004c0:	fba3 1302 	umull	r1, r3, r3, r2
 80004c4:	08d9      	lsrs	r1, r3, #3
 80004c6:	460b      	mov	r3, r1
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	440b      	add	r3, r1
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <displayVertical+0x4c>)
 80004d4:	70da      	strb	r2, [r3, #3]
	buffer[1][0] = num / 10;
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <displayVertical+0x48>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <displayVertical+0x4c>)
 80004e4:	709a      	strb	r2, [r3, #2]
 80004e6:	e000      	b.n	80004ea <displayVertical+0x3e>
		return;
 80004e8:	bf00      	nop
}
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	cccccccd 	.word	0xcccccccd
 80004f8:	20000034 	.word	0x20000034

080004fc <displayHorizon>:
 * Display number on horizon 7-segment led
 * input: number range 0-99
 * output: none
 * */
void displayHorizon(uint8_t num)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	if (num > 99)
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b63      	cmp	r3, #99	; 0x63
 800050a:	d815      	bhi.n	8000538 <displayHorizon+0x3c>
		return;
	buffer[0][1] = num % 10;
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <displayHorizon+0x48>)
 8000510:	fba3 1302 	umull	r1, r3, r3, r2
 8000514:	08d9      	lsrs	r1, r3, #3
 8000516:	460b      	mov	r3, r1
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	440b      	add	r3, r1
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <displayHorizon+0x4c>)
 8000524:	705a      	strb	r2, [r3, #1]
	buffer[0][0] = num / 10;
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <displayHorizon+0x48>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <displayHorizon+0x4c>)
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e000      	b.n	800053a <displayHorizon+0x3e>
		return;
 8000538:	bf00      	nop
}
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	cccccccd 	.word	0xcccccccd
 8000548:	20000034 	.word	0x20000034

0800054c <update7seg>:
 * Update 7-segment led
 * input: none
 * output: none
 * */
void update7seg()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  if (get_flag(2))
 8000550:	2002      	movs	r0, #2
 8000552:	f000 fd13 	bl	8000f7c <get_flag>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d031      	beq.n	80005c0 <update7seg+0x74>
  {
	  set_timer(2, 25);
 800055c:	2119      	movs	r1, #25
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fd44 	bl	8000fec <set_timer>
	  HAL_GPIO_WritePin(GPIOB, ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	210f      	movs	r1, #15
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <update7seg+0x78>)
 800056a:	f001 f984 	bl	8001876 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, ENV0_Pin << enable_counter, RESET);
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <update7seg+0x7c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	2301      	movs	r3, #1
 8000576:	4093      	lsls	r3, r2
 8000578:	b29b      	uxth	r3, r3
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4811      	ldr	r0, [pc, #68]	; (80005c4 <update7seg+0x78>)
 8000580:	f001 f979 	bl	8001876 <HAL_GPIO_WritePin>
	  display7seg(buffer[enable_counter/2][enable_counter%2]);
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <update7seg+0x7c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <update7seg+0x7c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <update7seg+0x80>)
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	440a      	add	r2, r1
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fed9 	bl	8000358 <display7seg>
	  enable_counter++;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <update7seg+0x7c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <update7seg+0x7c>)
 80005b0:	701a      	strb	r2, [r3, #0]
	  if (enable_counter > 3)
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <update7seg+0x7c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d902      	bls.n	80005c0 <update7seg+0x74>
		  enable_counter = 0;
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <update7seg+0x7c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
  }
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	20000038 	.word	0x20000038
 80005cc:	20000034 	.word	0x20000034

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fe4d 	bl	8001274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f96b 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f9f1 	bl	80009c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e2:	f000 f9a3 	bl	800092c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005e6:	48b0      	ldr	r0, [pc, #704]	; (80008a8 <main+0x2d8>)
 80005e8:	f001 fda2 	bl	8002130 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Initialize initial value */
  // timer interupt
  set_timer(0, 2);	// change mode
 80005ec:	2102      	movs	r1, #2
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fcfc 	bl	8000fec <set_timer>
  set_timer(1, 2);	// blink led
 80005f4:	2102      	movs	r1, #2
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fcf8 	bl	8000fec <set_timer>
  set_timer(2, 2);	// scan 7-segment led
 80005fc:	2102      	movs	r1, #2
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 fcf4 	bl	8000fec <set_timer>
  // led
  HAL_GPIO_WritePin(V_RED_GPIO_Port, V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin|
 8000604:	2201      	movs	r2, #1
 8000606:	217e      	movs	r1, #126	; 0x7e
 8000608:	48a8      	ldr	r0, [pc, #672]	; (80008ac <main+0x2dc>)
 800060a:	f001 f934 	bl	8001876 <HAL_GPIO_WritePin>
						   H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin, SET);
  // button
  init_button_state();
 800060e:	f7ff fd9d 	bl	800014c <init_button_state>
  STATE button[MAX_BUTTON];
  button[0] = NORMAL;
 8000612:	2300      	movs	r3, #0
 8000614:	703b      	strb	r3, [r7, #0]
  button[1] = NORMAL;
 8000616:	2300      	movs	r3, #0
 8000618:	707b      	strb	r3, [r7, #1]
  button[2] = NORMAL;
 800061a:	2300      	movs	r3, #0
 800061c:	70bb      	strb	r3, [r7, #2]
  // finite state machine
  FSM_STATE state = MODE_1;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
  setState1(INIT);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fb98 	bl	8000d58 <setState1>
  mode1();
 8000628:	f000 fa54 	bl	8000ad4 <mode1>
  TRAFFIC start_state = RED_GREEN;
 800062c:	2301      	movs	r3, #1
 800062e:	71bb      	strb	r3, [r7, #6]
  setState1(start_state);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fb90 	bl	8000d58 <setState1>
  // 7-segment led
  HAL_GPIO_WritePin(GPIOB, ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	210f      	movs	r1, #15
 800063c:	489c      	ldr	r0, [pc, #624]	; (80008b0 <main+0x2e0>)
 800063e:	f001 f91a 	bl	8001876 <HAL_GPIO_WritePin>


  while (1)
  {
	  if (isPressed(0))
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fdda 	bl	80001fc <isPressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <main+0x84>
		  button[0] = PRESSED;
 800064e:	2301      	movs	r3, #1
 8000650:	703b      	strb	r3, [r7, #0]
 8000652:	e00a      	b.n	800066a <main+0x9a>
	  else if (isLongPressed(0))
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fde9 	bl	800022c <isLongPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <main+0x96>
		  button[0] = LONG_PRESSED;
 8000660:	2302      	movs	r3, #2
 8000662:	703b      	strb	r3, [r7, #0]
 8000664:	e001      	b.n	800066a <main+0x9a>
	  else
		  button[0] = NORMAL;
 8000666:	2300      	movs	r3, #0
 8000668:	703b      	strb	r3, [r7, #0]

	  if (isPressed(1))
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff fdc6 	bl	80001fc <isPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <main+0xac>
  		  button[1] = PRESSED;
 8000676:	2301      	movs	r3, #1
 8000678:	707b      	strb	r3, [r7, #1]
 800067a:	e00a      	b.n	8000692 <main+0xc2>
  	  else if (isLongPressed(1))
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff fdd5 	bl	800022c <isLongPressed>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <main+0xbe>
  		  button[1] = LONG_PRESSED;
 8000688:	2302      	movs	r3, #2
 800068a:	707b      	strb	r3, [r7, #1]
 800068c:	e001      	b.n	8000692 <main+0xc2>
  	  else
  		  button[1] = NORMAL;
 800068e:	2300      	movs	r3, #0
 8000690:	707b      	strb	r3, [r7, #1]

	  if (isPressed(2))
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff fdb2 	bl	80001fc <isPressed>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <main+0xd4>
  		  button[2] = PRESSED;
 800069e:	2301      	movs	r3, #1
 80006a0:	70bb      	strb	r3, [r7, #2]
 80006a2:	e00a      	b.n	80006ba <main+0xea>
 	  else if (isLongPressed(0))
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff fdc1 	bl	800022c <isLongPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0xe6>
  		  button[2] = LONG_PRESSED;
 80006b0:	2302      	movs	r3, #2
 80006b2:	70bb      	strb	r3, [r7, #2]
 80006b4:	e001      	b.n	80006ba <main+0xea>
  	  else
  		  button[2] = NORMAL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	70bb      	strb	r3, [r7, #2]

	  switch (button[0])
 80006ba:	783b      	ldrb	r3, [r7, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d02f      	beq.n	8000720 <main+0x150>
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	dc2f      	bgt.n	8000724 <main+0x154>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d02f      	beq.n	8000728 <main+0x158>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d000      	beq.n	80006ce <main+0xfe>
		  break;
		  }
	  case LONG_PRESSED:
		  break;
	  default:
		  break;
 80006cc:	e02a      	b.n	8000724 <main+0x154>
		  if (state >= MODE_4)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d902      	bls.n	80006da <main+0x10a>
			  state = MODE_1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	e002      	b.n	80006e0 <main+0x110>
			  state++;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	3301      	adds	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
		  switch(state)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81b      	bhi.n	8000720 <main+0x150>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <main+0x120>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
			  setState1(INIT);
 8000700:	2000      	movs	r0, #0
 8000702:	f000 fb29 	bl	8000d58 <setState1>
			  break;
 8000706:	e00b      	b.n	8000720 <main+0x150>
			  setState2(MODE2_INIT);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fb7b 	bl	8000e04 <setState2>
			  break;
 800070e:	e007      	b.n	8000720 <main+0x150>
			  setState3(MODE3_INIT);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fbcd 	bl	8000eb0 <setState3>
			  break;
 8000716:	e003      	b.n	8000720 <main+0x150>
			  setState4(MODE4_INIT);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fc1f 	bl	8000f5c <setState4>
			  break;
 800071e:	bf00      	nop
		  break;
 8000720:	bf00      	nop
 8000722:	e002      	b.n	800072a <main+0x15a>
		  break;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <main+0x15a>
		  break;
 8000728:	bf00      	nop
	  }

	  switch (button[1])
 800072a:	787b      	ldrb	r3, [r7, #1]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d006      	beq.n	800073e <main+0x16e>
 8000730:	2b02      	cmp	r3, #2
 8000732:	dc06      	bgt.n	8000742 <main+0x172>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <main+0x176>
 8000738:	2b01      	cmp	r3, #1
 800073a:	d006      	beq.n	800074a <main+0x17a>
	  case PRESSED:
		  break;
	  case LONG_PRESSED:
		  break;
	  default:
		  break;
 800073c:	e001      	b.n	8000742 <main+0x172>
		  break;
 800073e:	bf00      	nop
 8000740:	e004      	b.n	800074c <main+0x17c>
		  break;
 8000742:	bf00      	nop
 8000744:	e002      	b.n	800074c <main+0x17c>
		  break;
 8000746:	bf00      	nop
 8000748:	e000      	b.n	800074c <main+0x17c>
		  break;
 800074a:	bf00      	nop
	  }

	  switch (button[2])
 800074c:	78bb      	ldrb	r3, [r7, #2]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d006      	beq.n	8000760 <main+0x190>
 8000752:	2b02      	cmp	r3, #2
 8000754:	dc06      	bgt.n	8000764 <main+0x194>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <main+0x198>
 800075a:	2b01      	cmp	r3, #1
 800075c:	d006      	beq.n	800076c <main+0x19c>
	  case PRESSED:
		  break;
	  case LONG_PRESSED:
		  break;
	  default:
		  break;
 800075e:	e001      	b.n	8000764 <main+0x194>
		  break;
 8000760:	bf00      	nop
 8000762:	e004      	b.n	800076e <main+0x19e>
		  break;
 8000764:	bf00      	nop
 8000766:	e002      	b.n	800076e <main+0x19e>
		  break;
 8000768:	bf00      	nop
 800076a:	e000      	b.n	800076e <main+0x19e>
		  break;
 800076c:	bf00      	nop
	  }

	  switch (state)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3b01      	subs	r3, #1
 8000772:	2b03      	cmp	r3, #3
 8000774:	f200 8093 	bhi.w	800089e <main+0x2ce>
 8000778:	a201      	add	r2, pc, #4	; (adr r2, 8000780 <main+0x1b0>)
 800077a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077e:	bf00      	nop
 8000780:	08000791 	.word	0x08000791
 8000784:	08000797 	.word	0x08000797
 8000788:	080007ef 	.word	0x080007ef
 800078c:	08000847 	.word	0x08000847
	  {
	  case MODE_1:
		  mode1();
 8000790:	f000 f9a0 	bl	8000ad4 <mode1>
		  break;
 8000794:	e084      	b.n	80008a0 <main+0x2d0>
	  case MODE_2:
		  switch (button[1])
 8000796:	787b      	ldrb	r3, [r7, #1]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d009      	beq.n	80007b0 <main+0x1e0>
 800079c:	2b02      	cmp	r3, #2
 800079e:	dc09      	bgt.n	80007b4 <main+0x1e4>
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d009      	beq.n	80007b8 <main+0x1e8>
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d105      	bne.n	80007b4 <main+0x1e4>
	  	  {
	  	  case NORMAL:
	  		  break;
	  	  case PRESSED:
	  		  // increase led duration
	  		  setState2(MODE2_INCREASE);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fb2b 	bl	8000e04 <setState2>
	  		  break;
 80007ae:	e004      	b.n	80007ba <main+0x1ea>
	  	  case LONG_PRESSED:
	  		  break;
 80007b0:	bf00      	nop
 80007b2:	e002      	b.n	80007ba <main+0x1ea>
	  	  default:
	  		  break;
 80007b4:	bf00      	nop
 80007b6:	e000      	b.n	80007ba <main+0x1ea>
	  		  break;
 80007b8:	bf00      	nop
	  	  }

		  switch (button[2])
 80007ba:	78bb      	ldrb	r3, [r7, #2]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d009      	beq.n	80007d4 <main+0x204>
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	dc09      	bgt.n	80007d8 <main+0x208>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d009      	beq.n	80007dc <main+0x20c>
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d105      	bne.n	80007d8 <main+0x208>
		  {
		  case NORMAL:
			  break;
		  case PRESSED:
			  // set time duration for led
			  setState2(MODE2_SET_TIME);
 80007cc:	2002      	movs	r0, #2
 80007ce:	f000 fb19 	bl	8000e04 <setState2>
			  break;
 80007d2:	e004      	b.n	80007de <main+0x20e>
		  case LONG_PRESSED:
			  break;
 80007d4:	bf00      	nop
 80007d6:	e002      	b.n	80007de <main+0x20e>
		  default:
			  break;
 80007d8:	bf00      	nop
 80007da:	e000      	b.n	80007de <main+0x20e>
			  break;
 80007dc:	bf00      	nop
		  }

		  mode2();
 80007de:	f000 facb 	bl	8000d78 <mode2>
		  displayVertical(2);
 80007e2:	2002      	movs	r0, #2
 80007e4:	f7ff fe62 	bl	80004ac <displayVertical>
		  blinkRed();
 80007e8:	f000 fca6 	bl	8001138 <blinkRed>
		  break;
 80007ec:	e058      	b.n	80008a0 <main+0x2d0>
	  case MODE_3:
		  switch (button[1])
 80007ee:	787b      	ldrb	r3, [r7, #1]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d009      	beq.n	8000808 <main+0x238>
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	dc09      	bgt.n	800080c <main+0x23c>
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d009      	beq.n	8000810 <main+0x240>
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d105      	bne.n	800080c <main+0x23c>
	  	  {
	  	  case NORMAL:
	  		  break;
	  	  case PRESSED:
	  		  // increase led duration
	  		  setState2(MODE2_INCREASE);
 8000800:	2001      	movs	r0, #1
 8000802:	f000 faff 	bl	8000e04 <setState2>
	  		  break;
 8000806:	e004      	b.n	8000812 <main+0x242>
	  	  case LONG_PRESSED:
	  		  break;
 8000808:	bf00      	nop
 800080a:	e002      	b.n	8000812 <main+0x242>
	  	  default:
	  		  break;
 800080c:	bf00      	nop
 800080e:	e000      	b.n	8000812 <main+0x242>
	  		  break;
 8000810:	bf00      	nop
	  	  }

		  switch (button[2])
 8000812:	78bb      	ldrb	r3, [r7, #2]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d009      	beq.n	800082c <main+0x25c>
 8000818:	2b02      	cmp	r3, #2
 800081a:	dc09      	bgt.n	8000830 <main+0x260>
 800081c:	2b00      	cmp	r3, #0
 800081e:	d009      	beq.n	8000834 <main+0x264>
 8000820:	2b01      	cmp	r3, #1
 8000822:	d105      	bne.n	8000830 <main+0x260>
		  {
		  case NORMAL:
			  break;
		  case PRESSED:
			  // set time duration for led
			  setState2(MODE2_SET_TIME);
 8000824:	2002      	movs	r0, #2
 8000826:	f000 faed 	bl	8000e04 <setState2>
			  break;
 800082a:	e004      	b.n	8000836 <main+0x266>
		  case LONG_PRESSED:
			  break;
 800082c:	bf00      	nop
 800082e:	e002      	b.n	8000836 <main+0x266>
		  default:
			  break;
 8000830:	bf00      	nop
 8000832:	e000      	b.n	8000836 <main+0x266>
			  break;
 8000834:	bf00      	nop
		  }

		  mode3();
 8000836:	f000 faf5 	bl	8000e24 <mode3>
		  displayVertical(3);
 800083a:	2003      	movs	r0, #3
 800083c:	f7ff fe36 	bl	80004ac <displayVertical>
		  blinkYellow();
 8000840:	f000 fc8e 	bl	8001160 <blinkYellow>
		  break;
 8000844:	e02c      	b.n	80008a0 <main+0x2d0>
	  case MODE_4:
		  switch (button[1])
 8000846:	787b      	ldrb	r3, [r7, #1]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d009      	beq.n	8000860 <main+0x290>
 800084c:	2b02      	cmp	r3, #2
 800084e:	dc09      	bgt.n	8000864 <main+0x294>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d009      	beq.n	8000868 <main+0x298>
 8000854:	2b01      	cmp	r3, #1
 8000856:	d105      	bne.n	8000864 <main+0x294>
	  	  {
	  	  case NORMAL:
	  		  break;
	  	  case PRESSED:
	  		  // increase led duration
	  		  setState2(MODE2_INCREASE);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 fad3 	bl	8000e04 <setState2>
	  		  break;
 800085e:	e004      	b.n	800086a <main+0x29a>
	  	  case LONG_PRESSED:
	  		  break;
 8000860:	bf00      	nop
 8000862:	e002      	b.n	800086a <main+0x29a>
	  	  default:
	  		  break;
 8000864:	bf00      	nop
 8000866:	e000      	b.n	800086a <main+0x29a>
	  		  break;
 8000868:	bf00      	nop
	  	  }

		  switch (button[2])
 800086a:	78bb      	ldrb	r3, [r7, #2]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d009      	beq.n	8000884 <main+0x2b4>
 8000870:	2b02      	cmp	r3, #2
 8000872:	dc09      	bgt.n	8000888 <main+0x2b8>
 8000874:	2b00      	cmp	r3, #0
 8000876:	d009      	beq.n	800088c <main+0x2bc>
 8000878:	2b01      	cmp	r3, #1
 800087a:	d105      	bne.n	8000888 <main+0x2b8>
		  {
		  case NORMAL:
			  break;
		  case PRESSED:
			  // set time duration for led
			  setState2(MODE2_SET_TIME);
 800087c:	2002      	movs	r0, #2
 800087e:	f000 fac1 	bl	8000e04 <setState2>
			  break;
 8000882:	e004      	b.n	800088e <main+0x2be>
		  case LONG_PRESSED:
			  break;
 8000884:	bf00      	nop
 8000886:	e002      	b.n	800088e <main+0x2be>
		  default:
			  break;
 8000888:	bf00      	nop
 800088a:	e000      	b.n	800088e <main+0x2be>
			  break;
 800088c:	bf00      	nop
		  }

		  mode4();
 800088e:	f000 fb1f 	bl	8000ed0 <mode4>
		  displayVertical(4);
 8000892:	2004      	movs	r0, #4
 8000894:	f7ff fe0a 	bl	80004ac <displayVertical>
		  blinkGreen();
 8000898:	f000 fc76 	bl	8001188 <blinkGreen>
		  break;
 800089c:	e000      	b.n	80008a0 <main+0x2d0>
	  default:
		  break;
 800089e:	bf00      	nop
	  }

	  update7seg();
 80008a0:	f7ff fe54 	bl	800054c <update7seg>
	  if (isPressed(0))
 80008a4:	e6cd      	b.n	8000642 <main+0x72>
 80008a6:	bf00      	nop
 80008a8:	200000a4 	.word	0x200000a4
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b090      	sub	sp, #64	; 0x40
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	2228      	movs	r2, #40	; 0x28
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fff0 	bl	80028a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008da:	2301      	movs	r3, #1
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008de:	2310      	movs	r3, #16
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f000 fff4 	bl	80018d8 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80008f6:	f000 f8e7 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fa60 	bl	8001dd8 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800091e:	f000 f8d3 	bl	8000ac8 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3740      	adds	r7, #64	; 0x40
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000940:	463b      	mov	r3, r7
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <MX_TIM2_Init+0x94>)
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_TIM2_Init+0x94>)
 8000952:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000956:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <MX_TIM2_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800095e:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_TIM2_Init+0x94>)
 8000960:	2209      	movs	r2, #9
 8000962:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <MX_TIM2_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_TIM2_Init+0x94>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_TIM2_Init+0x94>)
 8000972:	f001 fb8d 	bl	8002090 <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800097c:	f000 f8a4 	bl	8000ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000986:	f107 0308 	add.w	r3, r7, #8
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_TIM2_Init+0x94>)
 800098e:	f001 fd23 	bl	80023d8 <HAL_TIM_ConfigClockSource>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 f896 	bl	8000ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_TIM2_Init+0x94>)
 80009aa:	f001 feef 	bl	800278c <HAL_TIMEx_MasterConfigSynchronization>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009b4:	f000 f888 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200000a4 	.word	0x200000a4

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b28      	ldr	r3, [pc, #160]	; (8000a7c <MX_GPIO_Init+0xb8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a27      	ldr	r2, [pc, #156]	; (8000a7c <MX_GPIO_Init+0xb8>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b25      	ldr	r3, [pc, #148]	; (8000a7c <MX_GPIO_Init+0xb8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_GPIO_Init+0xb8>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	4a21      	ldr	r2, [pc, #132]	; (8000a7c <MX_GPIO_Init+0xb8>)
 80009f6:	f043 0308 	orr.w	r3, r3, #8
 80009fa:	6193      	str	r3, [r2, #24]
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_GPIO_Init+0xb8>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 0308 	and.w	r3, r3, #8
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin|H_RED_Pin
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 8000a0e:	481c      	ldr	r0, [pc, #112]	; (8000a80 <MX_GPIO_Init+0xbc>)
 8000a10:	f000 ff31 	bl	8001876 <HAL_GPIO_WritePin>
                          |H_YELLOW_Pin|H_GREEN_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	210f      	movs	r1, #15
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_GPIO_Init+0xc0>)
 8000a1a:	f000 ff2c 	bl	8001876 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : V_RED_Pin V_YELLOW_Pin V_GREEN_Pin H_RED_Pin
                           H_YELLOW_Pin H_GREEN_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin|H_RED_Pin
 8000a1e:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000a22:	60bb      	str	r3, [r7, #8]
                          |H_YELLOW_Pin|H_GREEN_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	4619      	mov	r1, r3
 8000a36:	4812      	ldr	r0, [pc, #72]	; (8000a80 <MX_GPIO_Init+0xbc>)
 8000a38:	f000 fd8c 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENV0_Pin ENV1_Pin ENH0_Pin ENH1_Pin */
  GPIO_InitStruct.Pin = ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin;
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0308 	add.w	r3, r7, #8
 8000a50:	4619      	mov	r1, r3
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_GPIO_Init+0xc0>)
 8000a54:	f000 fd7e 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000a58:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a5c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0308 	add.w	r3, r7, #8
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_GPIO_Init+0xc0>)
 8000a6e:	f000 fd71 	bl	8001554 <HAL_GPIO_Init>

}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010800 	.word	0x40010800
 8000a84:	40010c00 	.word	0x40010c00

08000a88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	run_timer(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 fa83 	bl	8000f9c <run_timer>
	run_timer(1);
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 fa80 	bl	8000f9c <run_timer>
	run_timer(2);
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f000 fa7d 	bl	8000f9c <run_timer>
	run_timer(3);
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f000 fa7a 	bl	8000f9c <run_timer>
	run_timer(4);
 8000aa8:	2004      	movs	r0, #4
 8000aaa:	f000 fa77 	bl	8000f9c <run_timer>
	getKey(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fbd4 	bl	800025c <getKey>
	getKey(1);
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f7ff fbd1 	bl	800025c <getKey>
	getKey(2);
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff fbce 	bl	800025c <getKey>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <mode1>:
 * run mode 1 in state machine
 * input: none
 * output: none
 * */
void mode1()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	if (get_flag(0))
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 fa4f 	bl	8000f7c <get_flag>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f000 8126 	beq.w	8000d32 <mode1+0x25e>
	{
		set_timer(0, 100);
 8000ae6:	2164      	movs	r1, #100	; 0x64
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 fa7f 	bl	8000fec <set_timer>
		switch (state)
 8000aee:	4b96      	ldr	r3, [pc, #600]	; (8000d48 <mode1+0x274>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	f200 8119 	bhi.w	8000d2a <mode1+0x256>
 8000af8:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <mode1+0x2c>)
 8000afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afe:	bf00      	nop
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b47 	.word	0x08000b47
 8000b08:	08000bc1 	.word	0x08000bc1
 8000b0c:	08000c3b 	.word	0x08000c3b
 8000b10:	08000cb3 	.word	0x08000cb3
		{
		case INIT:
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000b14:	2201      	movs	r2, #1
 8000b16:	217e      	movs	r1, #126	; 0x7e
 8000b18:	488c      	ldr	r0, [pc, #560]	; (8000d4c <mode1+0x278>)
 8000b1a:	f000 feac 	bl	8001876 <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			H_counter = 0;
 8000b1e:	4b8c      	ldr	r3, [pc, #560]	; (8000d50 <mode1+0x27c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
			V_counter = 0;
 8000b24:	4b8b      	ldr	r3, [pc, #556]	; (8000d54 <mode1+0x280>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
			displayHorizon(0);
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fce6 	bl	80004fc <displayHorizon>
			displayVertical(0);
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fcbb 	bl	80004ac <displayVertical>
			state = RED_GREEN;
 8000b36:	4b84      	ldr	r3, [pc, #528]	; (8000d48 <mode1+0x274>)
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
			set_timer(0, 2);
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 fa54 	bl	8000fec <set_timer>
			break;
 8000b44:	e0fe      	b.n	8000d44 <mode1+0x270>
		case RED_GREEN:
			if (H_counter == 0)
 8000b46:	4b82      	ldr	r3, [pc, #520]	; (8000d50 <mode1+0x27c>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d105      	bne.n	8000b5a <mode1+0x86>
				H_counter = getRed();
 8000b4e:	f000 fb4d 	bl	80011ec <getRed>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	4b7e      	ldr	r3, [pc, #504]	; (8000d50 <mode1+0x27c>)
 8000b58:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000b5a:	4b7e      	ldr	r3, [pc, #504]	; (8000d54 <mode1+0x280>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d105      	bne.n	8000b6e <mode1+0x9a>
				V_counter = getGreen();
 8000b62:	f000 fb57 	bl	8001214 <getGreen>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b7a      	ldr	r3, [pc, #488]	; (8000d54 <mode1+0x280>)
 8000b6c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000b6e:	2201      	movs	r2, #1
 8000b70:	217e      	movs	r1, #126	; 0x7e
 8000b72:	4876      	ldr	r0, [pc, #472]	; (8000d4c <mode1+0x278>)
 8000b74:	f000 fe7f 	bl	8001876 <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|V_GREEN_Pin, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2118      	movs	r1, #24
 8000b7c:	4873      	ldr	r0, [pc, #460]	; (8000d4c <mode1+0x278>)
 8000b7e:	f000 fe7a 	bl	8001876 <HAL_GPIO_WritePin>
			H_counter--;
 8000b82:	4b73      	ldr	r3, [pc, #460]	; (8000d50 <mode1+0x27c>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b71      	ldr	r3, [pc, #452]	; (8000d50 <mode1+0x27c>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000b8e:	4b71      	ldr	r3, [pc, #452]	; (8000d54 <mode1+0x280>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b6f      	ldr	r3, [pc, #444]	; (8000d54 <mode1+0x280>)
 8000b98:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	; (8000d50 <mode1+0x27c>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fcac 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000ba4:	4b6b      	ldr	r3, [pc, #428]	; (8000d54 <mode1+0x280>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fc7f 	bl	80004ac <displayVertical>
			if (V_counter == 0)
 8000bae:	4b69      	ldr	r3, [pc, #420]	; (8000d54 <mode1+0x280>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 80bf 	bne.w	8000d36 <mode1+0x262>
				state = RED_YELLOW;
 8000bb8:	4b63      	ldr	r3, [pc, #396]	; (8000d48 <mode1+0x274>)
 8000bba:	2202      	movs	r2, #2
 8000bbc:	701a      	strb	r2, [r3, #0]
			break;
 8000bbe:	e0ba      	b.n	8000d36 <mode1+0x262>
		case RED_YELLOW:
			if (H_counter == 0)
 8000bc0:	4b63      	ldr	r3, [pc, #396]	; (8000d50 <mode1+0x27c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d105      	bne.n	8000bd4 <mode1+0x100>
				H_counter = getRed();
 8000bc8:	f000 fb10 	bl	80011ec <getRed>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4b5f      	ldr	r3, [pc, #380]	; (8000d50 <mode1+0x27c>)
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000bd4:	4b5f      	ldr	r3, [pc, #380]	; (8000d54 <mode1+0x280>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d105      	bne.n	8000be8 <mode1+0x114>
				V_counter = getYellow();
 8000bdc:	f000 fb10 	bl	8001200 <getYellow>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b5b      	ldr	r3, [pc, #364]	; (8000d54 <mode1+0x280>)
 8000be6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000be8:	2201      	movs	r2, #1
 8000bea:	217e      	movs	r1, #126	; 0x7e
 8000bec:	4857      	ldr	r0, [pc, #348]	; (8000d4c <mode1+0x278>)
 8000bee:	f000 fe42 	bl	8001876 <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|V_YELLOW_Pin, RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2114      	movs	r1, #20
 8000bf6:	4855      	ldr	r0, [pc, #340]	; (8000d4c <mode1+0x278>)
 8000bf8:	f000 fe3d 	bl	8001876 <HAL_GPIO_WritePin>
			H_counter--;
 8000bfc:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <mode1+0x27c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	4b52      	ldr	r3, [pc, #328]	; (8000d50 <mode1+0x27c>)
 8000c06:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000c08:	4b52      	ldr	r3, [pc, #328]	; (8000d54 <mode1+0x280>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b50      	ldr	r3, [pc, #320]	; (8000d54 <mode1+0x280>)
 8000c12:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000c14:	4b4e      	ldr	r3, [pc, #312]	; (8000d50 <mode1+0x27c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc6f 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000c1e:	4b4d      	ldr	r3, [pc, #308]	; (8000d54 <mode1+0x280>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fc42 	bl	80004ac <displayVertical>
			if (V_counter == 0)
 8000c28:	4b4a      	ldr	r3, [pc, #296]	; (8000d54 <mode1+0x280>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f040 8084 	bne.w	8000d3a <mode1+0x266>
				state = GREEN_RED;
 8000c32:	4b45      	ldr	r3, [pc, #276]	; (8000d48 <mode1+0x274>)
 8000c34:	2203      	movs	r2, #3
 8000c36:	701a      	strb	r2, [r3, #0]
			break;
 8000c38:	e07f      	b.n	8000d3a <mode1+0x266>
		case GREEN_RED:
			if (H_counter == 0)
 8000c3a:	4b45      	ldr	r3, [pc, #276]	; (8000d50 <mode1+0x27c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d105      	bne.n	8000c4e <mode1+0x17a>
				H_counter = getGreen();
 8000c42:	f000 fae7 	bl	8001214 <getGreen>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b41      	ldr	r3, [pc, #260]	; (8000d50 <mode1+0x27c>)
 8000c4c:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000c4e:	4b41      	ldr	r3, [pc, #260]	; (8000d54 <mode1+0x280>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d105      	bne.n	8000c62 <mode1+0x18e>
				V_counter = getRed();
 8000c56:	f000 fac9 	bl	80011ec <getRed>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <mode1+0x280>)
 8000c60:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000c62:	2201      	movs	r2, #1
 8000c64:	217e      	movs	r1, #126	; 0x7e
 8000c66:	4839      	ldr	r0, [pc, #228]	; (8000d4c <mode1+0x278>)
 8000c68:	f000 fe05 	bl	8001876 <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_GREEN_Pin|V_RED_Pin, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2142      	movs	r1, #66	; 0x42
 8000c70:	4836      	ldr	r0, [pc, #216]	; (8000d4c <mode1+0x278>)
 8000c72:	f000 fe00 	bl	8001876 <HAL_GPIO_WritePin>
			H_counter--;
 8000c76:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <mode1+0x27c>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <mode1+0x27c>)
 8000c80:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000c82:	4b34      	ldr	r3, [pc, #208]	; (8000d54 <mode1+0x280>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b32      	ldr	r3, [pc, #200]	; (8000d54 <mode1+0x280>)
 8000c8c:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000c8e:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <mode1+0x27c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fc32 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000c98:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <mode1+0x280>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fc05 	bl	80004ac <displayVertical>
			if (H_counter == 0)
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <mode1+0x27c>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d149      	bne.n	8000d3e <mode1+0x26a>
				state = YELLOW_RED;
 8000caa:	4b27      	ldr	r3, [pc, #156]	; (8000d48 <mode1+0x274>)
 8000cac:	2204      	movs	r2, #4
 8000cae:	701a      	strb	r2, [r3, #0]
			break;
 8000cb0:	e045      	b.n	8000d3e <mode1+0x26a>
		case YELLOW_RED:
			if (H_counter == 0)
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <mode1+0x27c>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d105      	bne.n	8000cc6 <mode1+0x1f2>
				H_counter = getYellow();
 8000cba:	f000 faa1 	bl	8001200 <getYellow>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <mode1+0x27c>)
 8000cc4:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000cc6:	4b23      	ldr	r3, [pc, #140]	; (8000d54 <mode1+0x280>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d105      	bne.n	8000cda <mode1+0x206>
				V_counter = getRed();
 8000cce:	f000 fa8d 	bl	80011ec <getRed>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <mode1+0x280>)
 8000cd8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000cda:	2201      	movs	r2, #1
 8000cdc:	217e      	movs	r1, #126	; 0x7e
 8000cde:	481b      	ldr	r0, [pc, #108]	; (8000d4c <mode1+0x278>)
 8000ce0:	f000 fdc9 	bl	8001876 <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_YELLOW_Pin|V_RED_Pin, RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	2122      	movs	r1, #34	; 0x22
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <mode1+0x278>)
 8000cea:	f000 fdc4 	bl	8001876 <HAL_GPIO_WritePin>
			H_counter--;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <mode1+0x27c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <mode1+0x27c>)
 8000cf8:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <mode1+0x280>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <mode1+0x280>)
 8000d04:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <mode1+0x27c>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fbf6 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <mode1+0x280>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fbc9 	bl	80004ac <displayVertical>
			if (H_counter == 0)
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <mode1+0x27c>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <mode1+0x26e>
				state = RED_GREEN;
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <mode1+0x274>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	701a      	strb	r2, [r3, #0]
			break;
 8000d28:	e00b      	b.n	8000d42 <mode1+0x26e>
		default:
			state = INIT;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <mode1+0x274>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
			break;
 8000d30:	e008      	b.n	8000d44 <mode1+0x270>
		}
	}
 8000d32:	bf00      	nop
 8000d34:	e006      	b.n	8000d44 <mode1+0x270>
			break;
 8000d36:	bf00      	nop
 8000d38:	e004      	b.n	8000d44 <mode1+0x270>
			break;
 8000d3a:	bf00      	nop
 8000d3c:	e002      	b.n	8000d44 <mode1+0x270>
			break;
 8000d3e:	bf00      	nop
 8000d40:	e000      	b.n	8000d44 <mode1+0x270>
			break;
 8000d42:	bf00      	nop
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200000ec 	.word	0x200000ec
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	20000039 	.word	0x20000039
 8000d54:	2000003a 	.word	0x2000003a

08000d58 <setState1>:
 * Set state for mode 1
 * input: current state
 * output: none
 * */
void setState1(TRAFFIC cur_state)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <setState1+0x1c>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	7013      	strb	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200000ec 	.word	0x200000ec

08000d78 <mode2>:

MODE2_STATE state;
uint8_t red;

void mode2()
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	switch (state)
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <mode2+0x80>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d02e      	beq.n	8000de2 <mode2+0x6a>
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	dc32      	bgt.n	8000dee <mode2+0x76>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d002      	beq.n	8000d92 <mode2+0x1a>
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d00f      	beq.n	8000db0 <mode2+0x38>
	case MODE2_SET_TIME:
		// set time duration
		setRed(red);
		break;
	default:
		break;
 8000d90:	e02d      	b.n	8000dee <mode2+0x76>
		HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000d92:	2201      	movs	r2, #1
 8000d94:	217e      	movs	r1, #126	; 0x7e
 8000d96:	4819      	ldr	r0, [pc, #100]	; (8000dfc <mode2+0x84>)
 8000d98:	f000 fd6d 	bl	8001876 <HAL_GPIO_WritePin>
		state = MODE2_INCREASE;
 8000d9c:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <mode2+0x80>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
		red = getRed();
 8000da2:	f000 fa23 	bl	80011ec <getRed>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <mode2+0x88>)
 8000dac:	701a      	strb	r2, [r3, #0]
		break;
 8000dae:	e021      	b.n	8000df4 <mode2+0x7c>
		displayHorizon(red);
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <mode2+0x88>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fba1 	bl	80004fc <displayHorizon>
		if (isPressed(1))
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff fa1e 	bl	80001fc <isPressed>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d015      	beq.n	8000df2 <mode2+0x7a>
			red++;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <mode2+0x88>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <mode2+0x88>)
 8000dd0:	701a      	strb	r2, [r3, #0]
			if (red > 99)
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <mode2+0x88>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b63      	cmp	r3, #99	; 0x63
 8000dd8:	d90b      	bls.n	8000df2 <mode2+0x7a>
				red = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <mode2+0x88>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
		break;
 8000de0:	e007      	b.n	8000df2 <mode2+0x7a>
		setRed(red);
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <mode2+0x88>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f9e2 	bl	80011b0 <setRed>
		break;
 8000dec:	e002      	b.n	8000df4 <mode2+0x7c>
		break;
 8000dee:	bf00      	nop
 8000df0:	e000      	b.n	8000df4 <mode2+0x7c>
		break;
 8000df2:	bf00      	nop
	}
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200000ec 	.word	0x200000ec
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	20000004 	.word	0x20000004

08000e04 <setState2>:

void setState2(MODE2_STATE cur_state)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <setState2+0x1c>)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	7013      	strb	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200000ec 	.word	0x200000ec

08000e24 <mode3>:

MODE3_STATE state;
uint8_t yellow;

void mode3()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	switch (state)
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <mode3+0x80>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d02e      	beq.n	8000e8e <mode3+0x6a>
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	dc32      	bgt.n	8000e9a <mode3+0x76>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <mode3+0x1a>
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d00f      	beq.n	8000e5c <mode3+0x38>
	case MODE3_SET_TIME:
		// set time duration
		setYellow(yellow);
		break;
	default:
		break;
 8000e3c:	e02d      	b.n	8000e9a <mode3+0x76>
		HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000e3e:	2201      	movs	r2, #1
 8000e40:	217e      	movs	r1, #126	; 0x7e
 8000e42:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <mode3+0x84>)
 8000e44:	f000 fd17 	bl	8001876 <HAL_GPIO_WritePin>
		state = MODE3_INCREASE;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <mode3+0x80>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
		yellow = getYellow();
 8000e4e:	f000 f9d7 	bl	8001200 <getYellow>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <mode3+0x88>)
 8000e58:	701a      	strb	r2, [r3, #0]
		break;
 8000e5a:	e021      	b.n	8000ea0 <mode3+0x7c>
		displayHorizon(yellow);
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <mode3+0x88>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fb4b 	bl	80004fc <displayHorizon>
		if (isPressed(1))
 8000e66:	2001      	movs	r0, #1
 8000e68:	f7ff f9c8 	bl	80001fc <isPressed>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d015      	beq.n	8000e9e <mode3+0x7a>
			yellow++;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <mode3+0x88>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <mode3+0x88>)
 8000e7c:	701a      	strb	r2, [r3, #0]
			if (yellow > 99)
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <mode3+0x88>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b63      	cmp	r3, #99	; 0x63
 8000e84:	d90b      	bls.n	8000e9e <mode3+0x7a>
				yellow = 0;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <mode3+0x88>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
		break;
 8000e8c:	e007      	b.n	8000e9e <mode3+0x7a>
		setYellow(yellow);
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <mode3+0x88>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f996 	bl	80011c4 <setYellow>
		break;
 8000e98:	e002      	b.n	8000ea0 <mode3+0x7c>
		break;
 8000e9a:	bf00      	nop
 8000e9c:	e000      	b.n	8000ea0 <mode3+0x7c>
		break;
 8000e9e:	bf00      	nop
	}
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000ec 	.word	0x200000ec
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	20000005 	.word	0x20000005

08000eb0 <setState3>:

void setState3(MODE3_STATE cur_state)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000eba:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <setState3+0x1c>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	7013      	strb	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200000ec 	.word	0x200000ec

08000ed0 <mode4>:

MODE4_STATE state;
uint8_t green;

void mode4()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	switch (state)
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <mode4+0x80>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d02e      	beq.n	8000f3a <mode4+0x6a>
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	dc32      	bgt.n	8000f46 <mode4+0x76>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d002      	beq.n	8000eea <mode4+0x1a>
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d00f      	beq.n	8000f08 <mode4+0x38>
	case MODE4_SET_TIME:
		// set time duration
		setGreen(green);
		break;
	default:
		break;
 8000ee8:	e02d      	b.n	8000f46 <mode4+0x76>
		HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000eea:	2201      	movs	r2, #1
 8000eec:	217e      	movs	r1, #126	; 0x7e
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <mode4+0x84>)
 8000ef0:	f000 fcc1 	bl	8001876 <HAL_GPIO_WritePin>
		state = MODE4_INCREASE;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <mode4+0x80>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
		green = getGreen();
 8000efa:	f000 f98b 	bl	8001214 <getGreen>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <mode4+0x88>)
 8000f04:	701a      	strb	r2, [r3, #0]
		break;
 8000f06:	e021      	b.n	8000f4c <mode4+0x7c>
		displayHorizon(green);
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <mode4+0x88>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff faf5 	bl	80004fc <displayHorizon>
		if (isPressed(1))
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff f972 	bl	80001fc <isPressed>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <mode4+0x7a>
			green++;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <mode4+0x88>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <mode4+0x88>)
 8000f28:	701a      	strb	r2, [r3, #0]
			if (green > 99)
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <mode4+0x88>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b63      	cmp	r3, #99	; 0x63
 8000f30:	d90b      	bls.n	8000f4a <mode4+0x7a>
				green = 0;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <mode4+0x88>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
		break;
 8000f38:	e007      	b.n	8000f4a <mode4+0x7a>
		setGreen(green);
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <mode4+0x88>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f94a 	bl	80011d8 <setGreen>
		break;
 8000f44:	e002      	b.n	8000f4c <mode4+0x7c>
		break;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <mode4+0x7c>
		break;
 8000f4a:	bf00      	nop
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000ec 	.word	0x200000ec
 8000f54:	40010800 	.word	0x40010800
 8000f58:	20000006 	.word	0x20000006

08000f5c <setState4>:

void setState4(MODE4_STATE cur_state)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <setState4+0x1c>)
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	7013      	strb	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	200000ec 	.word	0x200000ec

08000f7c <get_flag>:
Get flag of timer
input: ID of timer
output: flag of this timer
*/
int get_flag(int idx_timer)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    return flag[idx_timer];
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <get_flag+0x1c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	2000003c 	.word	0x2000003c

08000f9c <run_timer>:
Count down and triggle the flag when counter = 0
input: ID of timer
output: none
*/
void run_timer(int idx)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
    if (timer_counter[idx] > 0)
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <run_timer+0x48>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	dd13      	ble.n	8000fd8 <run_timer+0x3c>
    {
        timer_counter[idx]--;
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	; (8000fe4 <run_timer+0x48>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb8:	1e5a      	subs	r2, r3, #1
 8000fba:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <run_timer+0x48>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (timer_counter[idx] == 0)
 8000fc2:	4a08      	ldr	r2, [pc, #32]	; (8000fe4 <run_timer+0x48>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d104      	bne.n	8000fd8 <run_timer+0x3c>
        {
            flag[idx] = 1;
 8000fce:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <run_timer+0x4c>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    }
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000064 	.word	0x20000064
 8000fe8:	2000003c 	.word	0x2000003c

08000fec <set_timer>:
Set the time for timer
input: ID of timer and duration of this timer
output: none
*/
void set_timer(int idx_timer, int duration)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    flag[idx_timer] = 0;
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <set_timer+0x28>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    timer_counter[idx_timer] = duration;
 8001000:	4905      	ldr	r1, [pc, #20]	; (8001018 <set_timer+0x2c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	2000003c 	.word	0x2000003c
 8001018:	20000064 	.word	0x20000064

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a14      	ldr	r2, [pc, #80]	; (8001078 <HAL_MspInit+0x5c>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <HAL_MspInit+0x5c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_MspInit+0x5c>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_MspInit+0x5c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_MspInit+0x60>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <HAL_MspInit+0x60>)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	40021000 	.word	0x40021000
 800107c:	40010000 	.word	0x40010000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001090:	d113      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_TIM_Base_MspInit+0x44>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <HAL_TIM_Base_MspInit+0x44>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_TIM_Base_MspInit+0x44>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2100      	movs	r1, #0
 80010ae:	201c      	movs	r0, #28
 80010b0:	f000 fa19 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b4:	201c      	movs	r0, #28
 80010b6:	f000 fa32 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <MemManage_Handler+0x4>

080010da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler+0x4>

080010e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e4:	e7fe      	b.n	80010e4 <UsageFault_Handler+0x4>

080010e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bc80      	pop	{r7}
 80010f0:	4770      	bx	lr

080010f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110e:	f000 f8f7 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM2_IRQHandler+0x10>)
 800111e:	f001 f853 	bl	80021c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200000a4 	.word	0x200000a4

0800112c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <blinkRed>:
 * Blink led red with frequency = 2Hz
 * input: none
 * output: none
 * */
void blinkRed()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	if (get_flag(1))
 800113c:	2001      	movs	r0, #1
 800113e:	f7ff ff1d 	bl	8000f7c <get_flag>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d007      	beq.n	8001158 <blinkRed+0x20>
	{
		set_timer(1, BLINK_LED);
 8001148:	2119      	movs	r1, #25
 800114a:	2001      	movs	r0, #1
 800114c:	f7ff ff4e 	bl	8000fec <set_timer>
		HAL_GPIO_TogglePin(GPIOA, V_RED_Pin|H_RED_Pin);
 8001150:	2112      	movs	r1, #18
 8001152:	4802      	ldr	r0, [pc, #8]	; (800115c <blinkRed+0x24>)
 8001154:	f000 fba7 	bl	80018a6 <HAL_GPIO_TogglePin>
	}
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40010800 	.word	0x40010800

08001160 <blinkYellow>:
 * Blink led yellow with frequency = 2Hz
 * input: none
 * output: none
 * */
void blinkYellow()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	if (get_flag(1))
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff ff09 	bl	8000f7c <get_flag>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <blinkYellow+0x20>
	{
		set_timer(1, BLINK_LED);
 8001170:	2119      	movs	r1, #25
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff ff3a 	bl	8000fec <set_timer>
		HAL_GPIO_TogglePin(GPIOA, V_YELLOW_Pin|H_YELLOW_Pin);
 8001178:	2124      	movs	r1, #36	; 0x24
 800117a:	4802      	ldr	r0, [pc, #8]	; (8001184 <blinkYellow+0x24>)
 800117c:	f000 fb93 	bl	80018a6 <HAL_GPIO_TogglePin>
	}
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40010800 	.word	0x40010800

08001188 <blinkGreen>:
 * Blink led green with frequency = 2Hz
 * input: none
 * output: none
 * */
void blinkGreen()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	if (get_flag(1))
 800118c:	2001      	movs	r0, #1
 800118e:	f7ff fef5 	bl	8000f7c <get_flag>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d007      	beq.n	80011a8 <blinkGreen+0x20>
	{
		set_timer(1, BLINK_LED);
 8001198:	2119      	movs	r1, #25
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff26 	bl	8000fec <set_timer>
		HAL_GPIO_TogglePin(GPIOA, V_GREEN_Pin|H_GREEN_Pin);
 80011a0:	2148      	movs	r1, #72	; 0x48
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <blinkGreen+0x24>)
 80011a4:	f000 fb7f 	bl	80018a6 <HAL_GPIO_TogglePin>
	}
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010800 	.word	0x40010800

080011b0 <setRed>:
 * Set time duration for led red
 * input: time duration
 * output: none
 * */
void setRed(uint8_t num)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]

}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <setYellow>:
 * Set time duration for led yellow
 * input: time duration
 * output: none
 * */
void setYellow(uint8_t num)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]

}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <setGreen>:
 * Set time duration for led green
 * input: time duration
 * output: none
 * */
void setGreen(uint8_t num)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]

}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <getRed>:
 * Get led red time duration
 * input: none
 * output: time duration
 * */
uint8_t getRed()
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	return red;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <getRed+0x10>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	20000004 	.word	0x20000004

08001200 <getYellow>:
 * Get led yellow time duration
 * input: none
 * output: time duration
 * */
uint8_t getYellow()
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	return yellow;
 8001204:	4b02      	ldr	r3, [pc, #8]	; (8001210 <getYellow+0x10>)
 8001206:	781b      	ldrb	r3, [r3, #0]
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	20000005 	.word	0x20000005

08001214 <getGreen>:
 * Get led green time duration
 * input: none
 * output: time duration
 * */
uint8_t getGreen()
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	return green;
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <getGreen+0x10>)
 800121a:	781b      	ldrb	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr
 8001224:	20000006 	.word	0x20000006

08001228 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001228:	f7ff ff80 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800122e:	490c      	ldr	r1, [pc, #48]	; (8001260 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a09      	ldr	r2, [pc, #36]	; (8001268 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001244:	4c09      	ldr	r4, [pc, #36]	; (800126c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001252:	f001 fb05 	bl	8002860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff f9bb 	bl	80005d0 <main>
  bx lr
 800125a:	4770      	bx	lr
  ldr r0, =_sdata
 800125c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001260:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001264:	080028fc 	.word	0x080028fc
  ldr r2, =_sbss
 8001268:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800126c:	200000f4 	.word	0x200000f4

08001270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001270:	e7fe      	b.n	8001270 <ADC1_2_IRQHandler>
	...

08001274 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x28>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x28>)
 800127e:	f043 0310 	orr.w	r3, r3, #16
 8001282:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f923 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	200f      	movs	r0, #15
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fec4 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f93b 	bl	800153a <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f000 f903 	bl	80014e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	20000008 	.word	0x20000008

08001300 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x1c>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x20>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_IncTick+0x20>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	2000000c 	.word	0x2000000c
 8001320:	200000f0 	.word	0x200000f0

08001324 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b02      	ldr	r3, [pc, #8]	; (8001334 <HAL_GetTick+0x10>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	200000f0 	.word	0x200000f0

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4906      	ldr	r1, [pc, #24]	; (80013d0 <__NVIC_EnableIRQ+0x34>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100

080013d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db0a      	blt.n	80013fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	490c      	ldr	r1, [pc, #48]	; (8001420 <__NVIC_SetPriority+0x4c>)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	0112      	lsls	r2, r2, #4
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	440b      	add	r3, r1
 80013f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013fc:	e00a      	b.n	8001414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4908      	ldr	r1, [pc, #32]	; (8001424 <__NVIC_SetPriority+0x50>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	3b04      	subs	r3, #4
 800140c:	0112      	lsls	r2, r2, #4
 800140e:	b2d2      	uxtb	r2, r2
 8001410:	440b      	add	r3, r1
 8001412:	761a      	strb	r2, [r3, #24]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001428:	b480      	push	{r7}
 800142a:	b089      	sub	sp, #36	; 0x24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f1c3 0307 	rsb	r3, r3, #7
 8001442:	2b04      	cmp	r3, #4
 8001444:	bf28      	it	cs
 8001446:	2304      	movcs	r3, #4
 8001448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3304      	adds	r3, #4
 800144e:	2b06      	cmp	r3, #6
 8001450:	d902      	bls.n	8001458 <NVIC_EncodePriority+0x30>
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3b03      	subs	r3, #3
 8001456:	e000      	b.n	800145a <NVIC_EncodePriority+0x32>
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	f04f 32ff 	mov.w	r2, #4294967295
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43da      	mvns	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001470:	f04f 31ff 	mov.w	r1, #4294967295
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43d9      	mvns	r1, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	4313      	orrs	r3, r2
         );
}
 8001482:	4618      	mov	r0, r3
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3b01      	subs	r3, #1
 8001498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800149c:	d301      	bcc.n	80014a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149e:	2301      	movs	r3, #1
 80014a0:	e00f      	b.n	80014c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <SysTick_Config+0x40>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014aa:	210f      	movs	r1, #15
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	f7ff ff90 	bl	80013d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <SysTick_Config+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SysTick_Config+0x40>)
 80014bc:	2207      	movs	r2, #7
 80014be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	e000e010 	.word	0xe000e010

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff2d 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff42 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ff90 	bl	8001428 <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff5f 	bl	80013d4 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff35 	bl	800139c <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffa2 	bl	800148c <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b08b      	sub	sp, #44	; 0x2c
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001566:	e148      	b.n	80017fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001568:	2201      	movs	r2, #1
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	69fa      	ldr	r2, [r7, #28]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8137 	bne.w	80017f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	4aa3      	ldr	r2, [pc, #652]	; (8001818 <HAL_GPIO_Init+0x2c4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d05e      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 8001590:	4aa1      	ldr	r2, [pc, #644]	; (8001818 <HAL_GPIO_Init+0x2c4>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d875      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 8001596:	4aa1      	ldr	r2, [pc, #644]	; (800181c <HAL_GPIO_Init+0x2c8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d058      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 800159c:	4a9f      	ldr	r2, [pc, #636]	; (800181c <HAL_GPIO_Init+0x2c8>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d86f      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015a2:	4a9f      	ldr	r2, [pc, #636]	; (8001820 <HAL_GPIO_Init+0x2cc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d052      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015a8:	4a9d      	ldr	r2, [pc, #628]	; (8001820 <HAL_GPIO_Init+0x2cc>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d869      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ae:	4a9d      	ldr	r2, [pc, #628]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d04c      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015b4:	4a9b      	ldr	r2, [pc, #620]	; (8001824 <HAL_GPIO_Init+0x2d0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d863      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ba:	4a9b      	ldr	r2, [pc, #620]	; (8001828 <HAL_GPIO_Init+0x2d4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d046      	beq.n	800164e <HAL_GPIO_Init+0xfa>
 80015c0:	4a99      	ldr	r2, [pc, #612]	; (8001828 <HAL_GPIO_Init+0x2d4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d85d      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d82a      	bhi.n	8001620 <HAL_GPIO_Init+0xcc>
 80015ca:	2b12      	cmp	r3, #18
 80015cc:	d859      	bhi.n	8001682 <HAL_GPIO_Init+0x12e>
 80015ce:	a201      	add	r2, pc, #4	; (adr r2, 80015d4 <HAL_GPIO_Init+0x80>)
 80015d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d4:	0800164f 	.word	0x0800164f
 80015d8:	08001629 	.word	0x08001629
 80015dc:	0800163b 	.word	0x0800163b
 80015e0:	0800167d 	.word	0x0800167d
 80015e4:	08001683 	.word	0x08001683
 80015e8:	08001683 	.word	0x08001683
 80015ec:	08001683 	.word	0x08001683
 80015f0:	08001683 	.word	0x08001683
 80015f4:	08001683 	.word	0x08001683
 80015f8:	08001683 	.word	0x08001683
 80015fc:	08001683 	.word	0x08001683
 8001600:	08001683 	.word	0x08001683
 8001604:	08001683 	.word	0x08001683
 8001608:	08001683 	.word	0x08001683
 800160c:	08001683 	.word	0x08001683
 8001610:	08001683 	.word	0x08001683
 8001614:	08001683 	.word	0x08001683
 8001618:	08001631 	.word	0x08001631
 800161c:	08001645 	.word	0x08001645
 8001620:	4a82      	ldr	r2, [pc, #520]	; (800182c <HAL_GPIO_Init+0x2d8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d013      	beq.n	800164e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001626:	e02c      	b.n	8001682 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	623b      	str	r3, [r7, #32]
          break;
 800162e:	e029      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	3304      	adds	r3, #4
 8001636:	623b      	str	r3, [r7, #32]
          break;
 8001638:	e024      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	3308      	adds	r3, #8
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e01f      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	330c      	adds	r3, #12
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e01a      	b.n	8001684 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001656:	2304      	movs	r3, #4
 8001658:	623b      	str	r3, [r7, #32]
          break;
 800165a:	e013      	b.n	8001684 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d105      	bne.n	8001670 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001664:	2308      	movs	r3, #8
 8001666:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	611a      	str	r2, [r3, #16]
          break;
 800166e:	e009      	b.n	8001684 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001670:	2308      	movs	r3, #8
 8001672:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	615a      	str	r2, [r3, #20]
          break;
 800167a:	e003      	b.n	8001684 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e000      	b.n	8001684 <HAL_GPIO_Init+0x130>
          break;
 8001682:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d801      	bhi.n	800168e <HAL_GPIO_Init+0x13a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	e001      	b.n	8001692 <HAL_GPIO_Init+0x13e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3304      	adds	r3, #4
 8001692:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d802      	bhi.n	80016a0 <HAL_GPIO_Init+0x14c>
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	e002      	b.n	80016a6 <HAL_GPIO_Init+0x152>
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3b08      	subs	r3, #8
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	210f      	movs	r1, #15
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	401a      	ands	r2, r3
 80016b8:	6a39      	ldr	r1, [r7, #32]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8090 	beq.w	80017f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <HAL_GPIO_Init+0x2dc>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a55      	ldr	r2, [pc, #340]	; (8001830 <HAL_GPIO_Init+0x2dc>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b53      	ldr	r3, [pc, #332]	; (8001830 <HAL_GPIO_Init+0x2dc>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016ec:	4a51      	ldr	r2, [pc, #324]	; (8001834 <HAL_GPIO_Init+0x2e0>)
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a49      	ldr	r2, [pc, #292]	; (8001838 <HAL_GPIO_Init+0x2e4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1e0>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a48      	ldr	r2, [pc, #288]	; (800183c <HAL_GPIO_Init+0x2e8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1dc>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a47      	ldr	r2, [pc, #284]	; (8001840 <HAL_GPIO_Init+0x2ec>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1d8>
 8001728:	2302      	movs	r3, #2
 800172a:	e004      	b.n	8001736 <HAL_GPIO_Init+0x1e2>
 800172c:	2303      	movs	r3, #3
 800172e:	e002      	b.n	8001736 <HAL_GPIO_Init+0x1e2>
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_GPIO_Init+0x1e2>
 8001734:	2300      	movs	r3, #0
 8001736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001738:	f002 0203 	and.w	r2, r2, #3
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	4093      	lsls	r3, r2
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4313      	orrs	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001746:	493b      	ldr	r1, [pc, #236]	; (8001834 <HAL_GPIO_Init+0x2e0>)
 8001748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d006      	beq.n	800176e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001760:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4937      	ldr	r1, [pc, #220]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]
 800176c:	e006      	b.n	800177c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800176e:	4b35      	ldr	r3, [pc, #212]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	43db      	mvns	r3, r3
 8001776:	4933      	ldr	r1, [pc, #204]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 8001778:	4013      	ands	r3, r2
 800177a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d006      	beq.n	8001796 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001788:	4b2e      	ldr	r3, [pc, #184]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	492d      	ldr	r1, [pc, #180]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	60cb      	str	r3, [r1, #12]
 8001794:	e006      	b.n	80017a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001796:	4b2b      	ldr	r3, [pc, #172]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	43db      	mvns	r3, r3
 800179e:	4929      	ldr	r1, [pc, #164]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017a0:	4013      	ands	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	491f      	ldr	r1, [pc, #124]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017d8:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4919      	ldr	r1, [pc, #100]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e006      	b.n	80017f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4915      	ldr	r1, [pc, #84]	; (8001844 <HAL_GPIO_Init+0x2f0>)
 80017f0:	4013      	ands	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	3301      	adds	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f47f aeaf 	bne.w	8001568 <HAL_GPIO_Init+0x14>
  }
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	372c      	adds	r7, #44	; 0x2c
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	10320000 	.word	0x10320000
 800181c:	10310000 	.word	0x10310000
 8001820:	10220000 	.word	0x10220000
 8001824:	10210000 	.word	0x10210000
 8001828:	10120000 	.word	0x10120000
 800182c:	10110000 	.word	0x10110000
 8001830:	40021000 	.word	0x40021000
 8001834:	40010000 	.word	0x40010000
 8001838:	40010800 	.word	0x40010800
 800183c:	40010c00 	.word	0x40010c00
 8001840:	40011000 	.word	0x40011000
 8001844:	40010400 	.word	0x40010400

08001848 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689a      	ldr	r2, [r3, #8]
 8001858:	887b      	ldrh	r3, [r7, #2]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e001      	b.n	800186a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	807b      	strh	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001886:	787b      	ldrb	r3, [r7, #1]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188c:	887a      	ldrh	r2, [r7, #2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001892:	e003      	b.n	800189c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001894:	887b      	ldrh	r3, [r7, #2]
 8001896:	041a      	lsls	r2, r3, #16
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	611a      	str	r2, [r3, #16]
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018b8:	887a      	ldrh	r2, [r7, #2]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4013      	ands	r3, r2
 80018be:	041a      	lsls	r2, r3, #16
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	887b      	ldrh	r3, [r7, #2]
 80018c6:	400b      	ands	r3, r1
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	611a      	str	r2, [r3, #16]
}
 80018ce:	bf00      	nop
 80018d0:	3714      	adds	r7, #20
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e26c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 8087 	beq.w	8001a06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018f8:	4b92      	ldr	r3, [pc, #584]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b04      	cmp	r3, #4
 8001902:	d00c      	beq.n	800191e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001904:	4b8f      	ldr	r3, [pc, #572]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b08      	cmp	r3, #8
 800190e:	d112      	bne.n	8001936 <HAL_RCC_OscConfig+0x5e>
 8001910:	4b8c      	ldr	r3, [pc, #560]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191c:	d10b      	bne.n	8001936 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191e:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d06c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x12c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d168      	bne.n	8001a04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e246      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800193e:	d106      	bne.n	800194e <HAL_RCC_OscConfig+0x76>
 8001940:	4b80      	ldr	r3, [pc, #512]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a7f      	ldr	r2, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e02e      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0x98>
 8001956:	4b7b      	ldr	r3, [pc, #492]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a77      	ldr	r2, [pc, #476]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01d      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0xbc>
 800197a:	4b72      	ldr	r3, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a71      	ldr	r2, [pc, #452]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b6f      	ldr	r3, [pc, #444]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001994:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a6a      	ldr	r2, [pc, #424]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a67      	ldr	r2, [pc, #412]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fcb6 	bl	8001324 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fcb2 	bl	8001324 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1fa      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0xe4>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019dc:	f7ff fca2 	bl	8001324 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e4:	f7ff fc9e 	bl	8001324 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b64      	cmp	r3, #100	; 0x64
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1e6      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	4b53      	ldr	r3, [pc, #332]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x10c>
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d063      	beq.n	8001ada <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a12:	4b4c      	ldr	r3, [pc, #304]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a1e:	4b49      	ldr	r3, [pc, #292]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x18c>
 8001a2a:	4b46      	ldr	r3, [pc, #280]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x176>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1ba      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4939      	ldr	r1, [pc, #228]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fc57 	bl	8001324 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fc53 	bl	8001324 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e19b      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2d      	ldr	r3, [pc, #180]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4927      	ldr	r1, [pc, #156]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <HAL_RCC_OscConfig+0x270>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc36 	bl	8001324 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff fc32 	bl	8001324 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e17a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d03a      	beq.n	8001b5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d019      	beq.n	8001b22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af4:	f7ff fc16 	bl	8001324 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff fc12 	bl	8001324 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e15a      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f000 fa9a 	bl	8002054 <RCC_Delay>
 8001b20:	e01c      	b.n	8001b5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x274>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b28:	f7ff fbfc 	bl	8001324 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2e:	e00f      	b.n	8001b50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b30:	f7ff fbf8 	bl	8001324 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d908      	bls.n	8001b50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e140      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	42420000 	.word	0x42420000
 8001b4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b50:	4b9e      	ldr	r3, [pc, #632]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e9      	bne.n	8001b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80a6 	beq.w	8001cb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6e:	4b97      	ldr	r3, [pc, #604]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10d      	bne.n	8001b96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b94      	ldr	r3, [pc, #592]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a93      	ldr	r2, [pc, #588]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b91      	ldr	r3, [pc, #580]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	2301      	movs	r3, #1
 8001b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b8e      	ldr	r3, [pc, #568]	; (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba2:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a8a      	ldr	r2, [pc, #552]	; (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bae:	f7ff fbb9 	bl	8001324 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7ff fbb5 	bl	8001324 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b64      	cmp	r3, #100	; 0x64
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0fd      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x312>
 8001bdc:	4b7b      	ldr	r3, [pc, #492]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a7a      	ldr	r2, [pc, #488]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	e02d      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x334>
 8001bf2:	4b76      	ldr	r3, [pc, #472]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a75      	ldr	r2, [pc, #468]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	4b73      	ldr	r3, [pc, #460]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a72      	ldr	r2, [pc, #456]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	e01c      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b05      	cmp	r3, #5
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x356>
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a6c      	ldr	r2, [pc, #432]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	4b6a      	ldr	r3, [pc, #424]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a69      	ldr	r2, [pc, #420]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x36e>
 8001c2e:	4b67      	ldr	r3, [pc, #412]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	4a66      	ldr	r2, [pc, #408]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	6213      	str	r3, [r2, #32]
 8001c3a:	4b64      	ldr	r3, [pc, #400]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a63      	ldr	r2, [pc, #396]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d015      	beq.n	8001c7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff fb69 	bl	8001324 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c56:	f7ff fb65 	bl	8001324 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e0ab      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c6c:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0ee      	beq.n	8001c56 <HAL_RCC_OscConfig+0x37e>
 8001c78:	e014      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fb53 	bl	8001324 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff fb4f 	bl	8001324 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e095      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ca4:	7dfb      	ldrb	r3, [r7, #23]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001caa:	4b48      	ldr	r3, [pc, #288]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8081 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc0:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d061      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d146      	bne.n	8001d62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd4:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_OscConfig+0x4fc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fb23 	bl	8001324 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce2:	f7ff fb1f 	bl	8001324 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e067      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1f0      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d08:	d108      	bne.n	8001d1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	492d      	ldr	r1, [pc, #180]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d1c:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a19      	ldr	r1, [r3, #32]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	4927      	ldr	r1, [pc, #156]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x4fc>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff faf3 	bl	8001324 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d42:	f7ff faef 	bl	8001324 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e037      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x46a>
 8001d60:	e02f      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_RCC_OscConfig+0x4fc>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fadc 	bl	8001324 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff fad8 	bl	8001324 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e020      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x498>
 8001d8e:	e018      	b.n	8001dc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d001      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42420060 	.word	0x42420060

08001dd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e0d0      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dec:	4b6a      	ldr	r3, [pc, #424]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d910      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfa:	4b67      	ldr	r3, [pc, #412]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 0207 	bic.w	r2, r3, #7
 8001e02:	4965      	ldr	r1, [pc, #404]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	494d      	ldr	r1, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d040      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d115      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e073      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06b      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb6:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f023 0203 	bic.w	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4936      	ldr	r1, [pc, #216]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec8:	f7ff fa2c 	bl	8001324 <HAL_GetTick>
 8001ecc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	e00a      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed0:	f7ff fa28 	bl	8001324 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e053      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 020c 	and.w	r2, r3, #12
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d1eb      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d210      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4922      	ldr	r1, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e032      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f66:	f000 f821 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1cc>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1d0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f98a 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	080028d0 	.word	0x080028d0
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000008 	.word	0x20000008

08001fac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fc6:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d002      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x30>
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d003      	beq.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fda:	e027      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fdc:	4b19      	ldr	r3, [pc, #100]	; (8002044 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fde:	613b      	str	r3, [r7, #16]
      break;
 8001fe0:	e027      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0c9b      	lsrs	r3, r3, #18
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fec:	5cd3      	ldrb	r3, [r2, r3]
 8001fee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d010      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	0c5b      	lsrs	r3, r3, #17
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a0d      	ldr	r2, [pc, #52]	; (8002044 <HAL_RCC_GetSysClockFreq+0x98>)
 800200e:	fb02 f203 	mul.w	r2, r2, r3
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	e004      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	613b      	str	r3, [r7, #16]
      break;
 800202a:	e002      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetSysClockFreq+0x98>)
 800202e:	613b      	str	r3, [r7, #16]
      break;
 8002030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002032:	693b      	ldr	r3, [r7, #16]
}
 8002034:	4618      	mov	r0, r3
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	007a1200 	.word	0x007a1200
 8002048:	080028e0 	.word	0x080028e0
 800204c:	080028f0 	.word	0x080028f0
 8002050:	003d0900 	.word	0x003d0900

08002054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <RCC_Delay+0x34>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a0a      	ldr	r2, [pc, #40]	; (800208c <RCC_Delay+0x38>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0a5b      	lsrs	r3, r3, #9
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002070:	bf00      	nop
  }
  while (Delay --);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	1e5a      	subs	r2, r3, #1
 8002076:	60fa      	str	r2, [r7, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f9      	bne.n	8002070 <RCC_Delay+0x1c>
}
 800207c:	bf00      	nop
 800207e:	bf00      	nop
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	20000000 	.word	0x20000000
 800208c:	10624dd3 	.word	0x10624dd3

08002090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e041      	b.n	8002126 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d106      	bne.n	80020bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe ffe2 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3304      	adds	r3, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4610      	mov	r0, r2
 80020d0:	f000 fa6e 	bl	80025b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d001      	beq.n	8002148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e035      	b.n	80021b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d009      	beq.n	800217e <HAL_TIM_Base_Start_IT+0x4e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002172:	d004      	beq.n	800217e <HAL_TIM_Base_Start_IT+0x4e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <HAL_TIM_Base_Start_IT+0x94>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d111      	bne.n	80021a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b06      	cmp	r3, #6
 800218e:	d010      	beq.n	80021b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f042 0201 	orr.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a0:	e007      	b.n	80021b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f042 0201 	orr.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40012c00 	.word	0x40012c00
 80021c4:	40000400 	.word	0x40000400

080021c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0202 	mvn.w	r2, #2
 80021f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f9b4 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f9a7 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f9b6 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	2b04      	cmp	r3, #4
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0204 	mvn.w	r2, #4
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f98a 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f97d 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f98c 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b08      	cmp	r3, #8
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b08      	cmp	r3, #8
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0208 	mvn.w	r2, #8
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2204      	movs	r2, #4
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f960 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f953 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f962 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0310 	and.w	r3, r3, #16
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d122      	bne.n	8002320 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0310 	and.w	r3, r3, #16
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d11b      	bne.n	8002320 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0210 	mvn.w	r2, #16
 80022f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2208      	movs	r2, #8
 80022f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f936 	bl	8002578 <HAL_TIM_IC_CaptureCallback>
 800230c:	e005      	b.n	800231a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f929 	bl	8002566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f938 	bl	800258a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b01      	cmp	r3, #1
 800232c:	d10e      	bne.n	800234c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d107      	bne.n	800234c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0201 	mvn.w	r2, #1
 8002344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe fb9e 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b80      	cmp	r3, #128	; 0x80
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002364:	2b80      	cmp	r3, #128	; 0x80
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 fa6b 	bl	800284e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f8fc 	bl	800259c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	2b20      	cmp	r3, #32
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0320 	and.w	r3, r3, #32
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0220 	mvn.w	r2, #32
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa36 	bl	800283c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIM_ConfigClockSource+0x1c>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0b4      	b.n	800255e <HAL_TIM_ConfigClockSource+0x186>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242c:	d03e      	beq.n	80024ac <HAL_TIM_ConfigClockSource+0xd4>
 800242e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002432:	f200 8087 	bhi.w	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243a:	f000 8086 	beq.w	800254a <HAL_TIM_ConfigClockSource+0x172>
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002442:	d87f      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b70      	cmp	r3, #112	; 0x70
 8002446:	d01a      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xa6>
 8002448:	2b70      	cmp	r3, #112	; 0x70
 800244a:	d87b      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b60      	cmp	r3, #96	; 0x60
 800244e:	d050      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0x11a>
 8002450:	2b60      	cmp	r3, #96	; 0x60
 8002452:	d877      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b50      	cmp	r3, #80	; 0x50
 8002456:	d03c      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0xfa>
 8002458:	2b50      	cmp	r3, #80	; 0x50
 800245a:	d873      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b40      	cmp	r3, #64	; 0x40
 800245e:	d058      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x13a>
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	d86f      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002464:	2b30      	cmp	r3, #48	; 0x30
 8002466:	d064      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 8002468:	2b30      	cmp	r3, #48	; 0x30
 800246a:	d86b      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 800246c:	2b20      	cmp	r3, #32
 800246e:	d060      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 8002470:	2b20      	cmp	r3, #32
 8002472:	d867      	bhi.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
 8002474:	2b00      	cmp	r3, #0
 8002476:	d05c      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 8002478:	2b10      	cmp	r3, #16
 800247a:	d05a      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x15a>
 800247c:	e062      	b.n	8002544 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f000 f95e 	bl	800274e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	609a      	str	r2, [r3, #8]
      break;
 80024aa:	e04f      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f000 f947 	bl	800274e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ce:	609a      	str	r2, [r3, #8]
      break;
 80024d0:	e03c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6859      	ldr	r1, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	461a      	mov	r2, r3
 80024e0:	f000 f8be 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2150      	movs	r1, #80	; 0x50
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 f915 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 80024f0:	e02c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	461a      	mov	r2, r3
 8002500:	f000 f8dc 	bl	80026bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2160      	movs	r1, #96	; 0x60
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f905 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 8002510:	e01c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	461a      	mov	r2, r3
 8002520:	f000 f89e 	bl	8002660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f8f5 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 8002530:	e00c      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f000 f8ec 	bl	800271a <TIM_ITRx_SetConfig>
      break;
 8002542:	e003      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e000      	b.n	800254c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800254a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800255c:	7bfb      	ldrb	r3, [r7, #15]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
	...

080025b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <TIM_Base_SetConfig+0xa8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <TIM_Base_SetConfig+0x28>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ce:	d003      	beq.n	80025d8 <TIM_Base_SetConfig+0x28>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a22      	ldr	r2, [pc, #136]	; (800265c <TIM_Base_SetConfig+0xac>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d108      	bne.n	80025ea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1a      	ldr	r2, [pc, #104]	; (8002658 <TIM_Base_SetConfig+0xa8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d007      	beq.n	8002602 <TIM_Base_SetConfig+0x52>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025f8:	d003      	beq.n	8002602 <TIM_Base_SetConfig+0x52>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a17      	ldr	r2, [pc, #92]	; (800265c <TIM_Base_SetConfig+0xac>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d108      	bne.n	8002614 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <TIM_Base_SetConfig+0xa8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d103      	bne.n	8002648 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	615a      	str	r2, [r3, #20]
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr
 8002658:	40012c00 	.word	0x40012c00
 800265c:	40000400 	.word	0x40000400

08002660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	f023 0201 	bic.w	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800268a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 030a 	bic.w	r3, r3, #10
 800269c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	621a      	str	r2, [r3, #32]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	f023 0210 	bic.w	r2, r3, #16
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	031b      	lsls	r3, r3, #12
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800271a:	b480      	push	{r7}
 800271c:	b085      	sub	sp, #20
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
 8002722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002730:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	f043 0307 	orr.w	r3, r3, #7
 800273c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr

0800274e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800274e:	b480      	push	{r7}
 8002750:	b087      	sub	sp, #28
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002768:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	021a      	lsls	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	431a      	orrs	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4313      	orrs	r3, r2
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	609a      	str	r2, [r3, #8]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e041      	b.n	8002828 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2202      	movs	r2, #2
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a14      	ldr	r2, [pc, #80]	; (8002834 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d004      	beq.n	80027fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d10c      	bne.n	8002816 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002802:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	4313      	orrs	r3, r2
 800280c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40012c00 	.word	0x40012c00
 8002838:	40000400 	.word	0x40000400

0800283c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	bc80      	pop	{r7}
 800285e:	4770      	bx	lr

08002860 <__libc_init_array>:
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	2600      	movs	r6, #0
 8002864:	4d0c      	ldr	r5, [pc, #48]	; (8002898 <__libc_init_array+0x38>)
 8002866:	4c0d      	ldr	r4, [pc, #52]	; (800289c <__libc_init_array+0x3c>)
 8002868:	1b64      	subs	r4, r4, r5
 800286a:	10a4      	asrs	r4, r4, #2
 800286c:	42a6      	cmp	r6, r4
 800286e:	d109      	bne.n	8002884 <__libc_init_array+0x24>
 8002870:	f000 f822 	bl	80028b8 <_init>
 8002874:	2600      	movs	r6, #0
 8002876:	4d0a      	ldr	r5, [pc, #40]	; (80028a0 <__libc_init_array+0x40>)
 8002878:	4c0a      	ldr	r4, [pc, #40]	; (80028a4 <__libc_init_array+0x44>)
 800287a:	1b64      	subs	r4, r4, r5
 800287c:	10a4      	asrs	r4, r4, #2
 800287e:	42a6      	cmp	r6, r4
 8002880:	d105      	bne.n	800288e <__libc_init_array+0x2e>
 8002882:	bd70      	pop	{r4, r5, r6, pc}
 8002884:	f855 3b04 	ldr.w	r3, [r5], #4
 8002888:	4798      	blx	r3
 800288a:	3601      	adds	r6, #1
 800288c:	e7ee      	b.n	800286c <__libc_init_array+0xc>
 800288e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002892:	4798      	blx	r3
 8002894:	3601      	adds	r6, #1
 8002896:	e7f2      	b.n	800287e <__libc_init_array+0x1e>
 8002898:	080028f4 	.word	0x080028f4
 800289c:	080028f4 	.word	0x080028f4
 80028a0:	080028f4 	.word	0x080028f4
 80028a4:	080028f8 	.word	0x080028f8

080028a8 <memset>:
 80028a8:	4603      	mov	r3, r0
 80028aa:	4402      	add	r2, r0
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d100      	bne.n	80028b2 <memset+0xa>
 80028b0:	4770      	bx	lr
 80028b2:	f803 1b01 	strb.w	r1, [r3], #1
 80028b6:	e7f9      	b.n	80028ac <memset+0x4>

080028b8 <_init>:
 80028b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ba:	bf00      	nop
 80028bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028be:	bc08      	pop	{r3}
 80028c0:	469e      	mov	lr, r3
 80028c2:	4770      	bx	lr

080028c4 <_fini>:
 80028c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c6:	bf00      	nop
 80028c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ca:	bc08      	pop	{r3}
 80028cc:	469e      	mov	lr, r3
 80028ce:	4770      	bx	lr


lab3_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000257c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002688  08002688  00012688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026ac  080026ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080026ac  080026ac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026ac  080026ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026b0  080026b0  000126b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080026b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000010  080026c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080026c4  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c8d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8c  00000000  00000000  00029cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001717d  00000000  00000000  0002d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccb6  00000000  00000000  0004422d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082488  00000000  00000000  00050ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d336b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f8  00000000  00000000  000d33c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002670 	.word	0x08002670

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002670 	.word	0x08002670

0800014c <init_button_state>:
/*Initial button state
 * input: none
 * output: none
 * */
void init_button_state()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_BUTTON; i++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e01f      	b.n	8000198 <init_button_state+0x4c>
	{
		button[i].bState[0] = GPIO_PIN_SET;
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	4a14      	ldr	r2, [pc, #80]	; (80001ac <init_button_state+0x60>)
 800015c:	2101      	movs	r1, #1
 800015e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		button[i].bState[1] = GPIO_PIN_SET;
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	4a11      	ldr	r2, [pc, #68]	; (80001ac <init_button_state+0x60>)
 8000166:	009b      	lsls	r3, r3, #2
 8000168:	4413      	add	r3, r2
 800016a:	2201      	movs	r2, #1
 800016c:	705a      	strb	r2, [r3, #1]
		button[i].bState[2] = GPIO_PIN_SET;
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	4a0e      	ldr	r2, [pc, #56]	; (80001ac <init_button_state+0x60>)
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	4413      	add	r3, r2
 8000176:	2201      	movs	r2, #1
 8000178:	709a      	strb	r2, [r3, #2]
		button[i].bState[3] = GPIO_PIN_SET;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	4a0b      	ldr	r2, [pc, #44]	; (80001ac <init_button_state+0x60>)
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4413      	add	r3, r2
 8000182:	2201      	movs	r2, #1
 8000184:	70da      	strb	r2, [r3, #3]

		counter[i] = PRESS_TIME;
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <init_button_state+0x64>)
 800018a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < MAX_BUTTON; i++)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	3301      	adds	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	2b02      	cmp	r3, #2
 800019c:	d9dc      	bls.n	8000158 <init_button_state+0xc>
	}
}
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	370c      	adds	r7, #12
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	20000098 	.word	0x20000098

080001b4 <checkState>:
 * Check 3 nearest state of index button
 * input: index of button
 * output: state of button
 * */
uint8_t checkState(uint8_t idx)
{
 80001b4:	b480      	push	{r7}
 80001b6:	b083      	sub	sp, #12
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	4603      	mov	r3, r0
 80001bc:	71fb      	strb	r3, [r7, #7]
	if (button[idx].bState[1] == GPIO_PIN_RESET && button[idx].bState[2] == GPIO_PIN_RESET && button[idx].bState[3] == GPIO_PIN_RESET)
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	4a0d      	ldr	r2, [pc, #52]	; (80001f8 <checkState+0x44>)
 80001c2:	009b      	lsls	r3, r3, #2
 80001c4:	4413      	add	r3, r2
 80001c6:	785b      	ldrb	r3, [r3, #1]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d10f      	bne.n	80001ec <checkState+0x38>
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	4a0a      	ldr	r2, [pc, #40]	; (80001f8 <checkState+0x44>)
 80001d0:	009b      	lsls	r3, r3, #2
 80001d2:	4413      	add	r3, r2
 80001d4:	789b      	ldrb	r3, [r3, #2]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d108      	bne.n	80001ec <checkState+0x38>
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <checkState+0x44>)
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	4413      	add	r3, r2
 80001e2:	78db      	ldrb	r3, [r3, #3]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <checkState+0x38>
		return GPIO_PIN_RESET;
 80001e8:	2300      	movs	r3, #0
 80001ea:	e000      	b.n	80001ee <checkState+0x3a>
	return GPIO_PIN_SET;
 80001ec:	2301      	movs	r3, #1
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	2000008c 	.word	0x2000008c

080001fc <isPressed>:

uint8_t isPressed(uint8_t idx)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	if (bFlag[idx] == 1)
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <isPressed+0x2c>)
 800020a:	5cd3      	ldrb	r3, [r2, r3]
 800020c:	2b01      	cmp	r3, #1
 800020e:	d105      	bne.n	800021c <isPressed+0x20>
	{
		bFlag[idx] = 0;
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	4a05      	ldr	r2, [pc, #20]	; (8000228 <isPressed+0x2c>)
 8000214:	2100      	movs	r1, #0
 8000216:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000218:	2301      	movs	r3, #1
 800021a:	e000      	b.n	800021e <isPressed+0x22>
	}
	return 0;
 800021c:	2300      	movs	r3, #0
}
 800021e:	4618      	mov	r0, r3
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	2000002c 	.word	0x2000002c

0800022c <isLongPressed>:

uint8_t isLongPressed(uint8_t idx)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
	if (bLongFlag[idx] == 1)
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4a07      	ldr	r2, [pc, #28]	; (8000258 <isLongPressed+0x2c>)
 800023a:	5cd3      	ldrb	r3, [r2, r3]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d105      	bne.n	800024c <isLongPressed+0x20>
	{
		bLongFlag[idx] = 0;
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	4a05      	ldr	r2, [pc, #20]	; (8000258 <isLongPressed+0x2c>)
 8000244:	2100      	movs	r1, #0
 8000246:	54d1      	strb	r1, [r2, r3]
		return 1;
 8000248:	2301      	movs	r3, #1
 800024a:	e000      	b.n	800024e <isLongPressed+0x22>
	}
	return 0;
 800024c:	2300      	movs	r3, #0
}
 800024e:	4618      	mov	r0, r3
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000030 	.word	0x20000030

0800025c <getKey>:
 * Get input key
 * input: index of button
 * output: none
 * */
void getKey(uint8_t idx)
{
 800025c:	b590      	push	{r4, r7, lr}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
	button[idx].bState[1] = button[idx].bState[2];
 8000266:	79fb      	ldrb	r3, [r7, #7]
 8000268:	79fa      	ldrb	r2, [r7, #7]
 800026a:	4936      	ldr	r1, [pc, #216]	; (8000344 <getKey+0xe8>)
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	440b      	add	r3, r1
 8000270:	7898      	ldrb	r0, [r3, #2]
 8000272:	4934      	ldr	r1, [pc, #208]	; (8000344 <getKey+0xe8>)
 8000274:	0093      	lsls	r3, r2, #2
 8000276:	440b      	add	r3, r1
 8000278:	4602      	mov	r2, r0
 800027a:	705a      	strb	r2, [r3, #1]
	button[idx].bState[2] = button[idx].bState[3];
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	79fa      	ldrb	r2, [r7, #7]
 8000280:	4930      	ldr	r1, [pc, #192]	; (8000344 <getKey+0xe8>)
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	440b      	add	r3, r1
 8000286:	78d8      	ldrb	r0, [r3, #3]
 8000288:	492e      	ldr	r1, [pc, #184]	; (8000344 <getKey+0xe8>)
 800028a:	0093      	lsls	r3, r2, #2
 800028c:	440b      	add	r3, r1
 800028e:	4602      	mov	r2, r0
 8000290:	709a      	strb	r2, [r3, #2]
	button[idx].bState[3] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin << idx);
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000298:	fa02 f303 	lsl.w	r3, r2, r3
 800029c:	b29b      	uxth	r3, r3
 800029e:	79fc      	ldrb	r4, [r7, #7]
 80002a0:	4619      	mov	r1, r3
 80002a2:	4829      	ldr	r0, [pc, #164]	; (8000348 <getKey+0xec>)
 80002a4:	f001 f9ac 	bl	8001600 <HAL_GPIO_ReadPin>
 80002a8:	4603      	mov	r3, r0
 80002aa:	4619      	mov	r1, r3
 80002ac:	4a25      	ldr	r2, [pc, #148]	; (8000344 <getKey+0xe8>)
 80002ae:	00a3      	lsls	r3, r4, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	460a      	mov	r2, r1
 80002b4:	70da      	strb	r2, [r3, #3]
	if (checkState(idx) == RESET)
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff7b 	bl	80001b4 <checkState>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d12f      	bne.n	8000324 <getKey+0xc8>
	{
		if (button[idx].bState[0] == GPIO_PIN_SET)
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4a1f      	ldr	r2, [pc, #124]	; (8000344 <getKey+0xe8>)
 80002c8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80002cc:	2b01      	cmp	r3, #1
 80002ce:	d10f      	bne.n	80002f0 <getKey+0x94>
		{
			// Debounced button
			bFlag[idx] = 1;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4a1e      	ldr	r2, [pc, #120]	; (800034c <getKey+0xf0>)
 80002d4:	2101      	movs	r1, #1
 80002d6:	54d1      	strb	r1, [r2, r3]
			button[idx].bState[0] = GPIO_PIN_RESET;
 80002d8:	79fb      	ldrb	r3, [r7, #7]
 80002da:	4a1a      	ldr	r2, [pc, #104]	; (8000344 <getKey+0xe8>)
 80002dc:	2100      	movs	r1, #0
 80002de:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			counter[idx] = PRESS_TIME;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4a1a      	ldr	r2, [pc, #104]	; (8000350 <getKey+0xf4>)
 80002e6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80002ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	else
	{
		button[idx].bState[0] = GPIO_PIN_SET;
		counter[idx] = PRESS_TIME;
	}
}
 80002ee:	e024      	b.n	800033a <getKey+0xde>
			if (counter[idx] == 0)
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4a17      	ldr	r2, [pc, #92]	; (8000350 <getKey+0xf4>)
 80002f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10a      	bne.n	8000312 <getKey+0xb6>
				bLongFlag[idx] = 1;
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a15      	ldr	r2, [pc, #84]	; (8000354 <getKey+0xf8>)
 8000300:	2101      	movs	r1, #1
 8000302:	54d1      	strb	r1, [r2, r3]
				counter[idx] = PRESS_TIME;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	4a12      	ldr	r2, [pc, #72]	; (8000350 <getKey+0xf4>)
 8000308:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800030c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000310:	e013      	b.n	800033a <getKey+0xde>
				counter[idx]--;
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <getKey+0xf4>)
 8000316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800031a:	3a01      	subs	r2, #1
 800031c:	490c      	ldr	r1, [pc, #48]	; (8000350 <getKey+0xf4>)
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000322:	e00a      	b.n	800033a <getKey+0xde>
		button[idx].bState[0] = GPIO_PIN_SET;
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4a07      	ldr	r2, [pc, #28]	; (8000344 <getKey+0xe8>)
 8000328:	2101      	movs	r1, #1
 800032a:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		counter[idx] = PRESS_TIME;
 800032e:	79fb      	ldrb	r3, [r7, #7]
 8000330:	4a07      	ldr	r2, [pc, #28]	; (8000350 <getKey+0xf4>)
 8000332:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	bd90      	pop	{r4, r7, pc}
 8000342:	bf00      	nop
 8000344:	2000008c 	.word	0x2000008c
 8000348:	40010c00 	.word	0x40010c00
 800034c:	2000002c 	.word	0x2000002c
 8000350:	20000098 	.word	0x20000098
 8000354:	20000030 	.word	0x20000030

08000358 <display7seg>:
 * Display number on 7-segment led
 * input: number range 0-9
 * output: none
 * */
void display7seg(uint8_t num)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	switch(num)
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b09      	cmp	r3, #9
 8000366:	f200 8093 	bhi.w	8000490 <display7seg+0x138>
 800036a:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <display7seg+0x18>)
 800036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000370:	08000399 	.word	0x08000399
 8000374:	080003b3 	.word	0x080003b3
 8000378:	080003cd 	.word	0x080003cd
 800037c:	080003e7 	.word	0x080003e7
 8000380:	08000401 	.word	0x08000401
 8000384:	0800041b 	.word	0x0800041b
 8000388:	08000435 	.word	0x08000435
 800038c:	0800044f 	.word	0x0800044f
 8000390:	08000469 	.word	0x08000469
 8000394:	08000477 	.word	0x08000477
	{
	case 0:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800039e:	4842      	ldr	r0, [pc, #264]	; (80004a8 <display7seg+0x150>)
 80003a0:	f001 f945 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG6_Pin, SET);
 80003a4:	2201      	movs	r2, #1
 80003a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003aa:	483f      	ldr	r0, [pc, #252]	; (80004a8 <display7seg+0x150>)
 80003ac:	f001 f93f 	bl	800162e <HAL_GPIO_WritePin>
		break;
 80003b0:	e075      	b.n	800049e <display7seg+0x146>
	case 1:
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin, RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80003b8:	483b      	ldr	r0, [pc, #236]	; (80004a8 <display7seg+0x150>)
 80003ba:	f001 f938 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 80003c4:	4838      	ldr	r0, [pc, #224]	; (80004a8 <display7seg+0x150>)
 80003c6:	f001 f932 	bl	800162e <HAL_GPIO_WritePin>
		break;
 80003ca:	e068      	b.n	800049e <display7seg+0x146>
	case 2:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin|SEG6_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80003d2:	4835      	ldr	r0, [pc, #212]	; (80004a8 <display7seg+0x150>)
 80003d4:	f001 f92b 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG2_Pin|SEG5_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 80003de:	4832      	ldr	r0, [pc, #200]	; (80004a8 <display7seg+0x150>)
 80003e0:	f001 f925 	bl	800162e <HAL_GPIO_WritePin>
		break;
 80003e4:	e05b      	b.n	800049e <display7seg+0x146>
	case 3:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG6_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 80003ec:	482e      	ldr	r0, [pc, #184]	; (80004a8 <display7seg+0x150>)
 80003ee:	f001 f91e 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_Pin|SEG5_Pin, SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80003f8:	482b      	ldr	r0, [pc, #172]	; (80004a8 <display7seg+0x150>)
 80003fa:	f001 f918 	bl	800162e <HAL_GPIO_WritePin>
		break;
 80003fe:	e04e      	b.n	800049e <display7seg+0x146>
	case 4:
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG2_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000406:	4828      	ldr	r0, [pc, #160]	; (80004a8 <display7seg+0x150>)
 8000408:	f001 f911 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG3_Pin|SEG4_Pin, SET);
 800040c:	2201      	movs	r2, #1
 800040e:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000412:	4825      	ldr	r0, [pc, #148]	; (80004a8 <display7seg+0x150>)
 8000414:	f001 f90b 	bl	800162e <HAL_GPIO_WritePin>
		break;
 8000418:	e041      	b.n	800049e <display7seg+0x146>
	case 5:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 8000420:	4821      	ldr	r0, [pc, #132]	; (80004a8 <display7seg+0x150>)
 8000422:	f001 f904 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin|SEG4_Pin, SET);
 8000426:	2201      	movs	r2, #1
 8000428:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800042c:	481e      	ldr	r0, [pc, #120]	; (80004a8 <display7seg+0x150>)
 800042e:	f001 f8fe 	bl	800162e <HAL_GPIO_WritePin>
		break;
 8000432:	e034      	b.n	800049e <display7seg+0x146>
	case 6:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 800043a:	481b      	ldr	r0, [pc, #108]	; (80004a8 <display7seg+0x150>)
 800043c:	f001 f8f7 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG1_Pin, SET);
 8000440:	2201      	movs	r2, #1
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4818      	ldr	r0, [pc, #96]	; (80004a8 <display7seg+0x150>)
 8000448:	f001 f8f1 	bl	800162e <HAL_GPIO_WritePin>
		break;
 800044c:	e027      	b.n	800049e <display7seg+0x146>
	case 7:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000454:	4814      	ldr	r0, [pc, #80]	; (80004a8 <display7seg+0x150>)
 8000456:	f001 f8ea 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 800045a:	2201      	movs	r2, #1
 800045c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8000460:	4811      	ldr	r0, [pc, #68]	; (80004a8 <display7seg+0x150>)
 8000462:	f001 f8e4 	bl	800162e <HAL_GPIO_WritePin>
		break;
 8000466:	e01a      	b.n	800049e <display7seg+0x146>
	case 8:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <display7seg+0x150>)
 8000470:	f001 f8dd 	bl	800162e <HAL_GPIO_WritePin>
		break;
 8000474:	e013      	b.n	800049e <display7seg+0x146>
	case 9:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 800047c:	480a      	ldr	r0, [pc, #40]	; (80004a8 <display7seg+0x150>)
 800047e:	f001 f8d6 	bl	800162e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000488:	4807      	ldr	r0, [pc, #28]	; (80004a8 <display7seg+0x150>)
 800048a:	f001 f8d0 	bl	800162e <HAL_GPIO_WritePin>
		break;
 800048e:	e006      	b.n	800049e <display7seg+0x146>
	default:
		HAL_GPIO_WritePin(GPIOA, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <display7seg+0x150>)
 8000498:	f001 f8c9 	bl	800162e <HAL_GPIO_WritePin>
		break;
 800049c:	bf00      	nop
	}
}
 800049e:	bf00      	nop
 80004a0:	3708      	adds	r7, #8
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010800 	.word	0x40010800

080004ac <displayVertical>:
 * Display number on vertical 7-segment led
 * input: number range 0-99
 * output: none
 * */
void displayVertical(uint8_t num)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	4603      	mov	r3, r0
 80004b4:	71fb      	strb	r3, [r7, #7]
	if (num > 99)
 80004b6:	79fb      	ldrb	r3, [r7, #7]
 80004b8:	2b63      	cmp	r3, #99	; 0x63
 80004ba:	d815      	bhi.n	80004e8 <displayVertical+0x3c>
		return;
	buffer[1][1] = num % 10;
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <displayVertical+0x48>)
 80004c0:	fba3 1302 	umull	r1, r3, r3, r2
 80004c4:	08d9      	lsrs	r1, r3, #3
 80004c6:	460b      	mov	r3, r1
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	440b      	add	r3, r1
 80004cc:	005b      	lsls	r3, r3, #1
 80004ce:	1ad3      	subs	r3, r2, r3
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <displayVertical+0x4c>)
 80004d4:	70da      	strb	r2, [r3, #3]
	buffer[1][0] = num / 10;
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	4a06      	ldr	r2, [pc, #24]	; (80004f4 <displayVertical+0x48>)
 80004da:	fba2 2303 	umull	r2, r3, r2, r3
 80004de:	08db      	lsrs	r3, r3, #3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <displayVertical+0x4c>)
 80004e4:	709a      	strb	r2, [r3, #2]
 80004e6:	e000      	b.n	80004ea <displayVertical+0x3e>
		return;
 80004e8:	bf00      	nop
}
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	cccccccd 	.word	0xcccccccd
 80004f8:	20000034 	.word	0x20000034

080004fc <displayHorizon>:
 * Display number on horizon 7-segment led
 * input: number range 0-99
 * output: none
 * */
void displayHorizon(uint8_t num)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
	if (num > 99)
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	2b63      	cmp	r3, #99	; 0x63
 800050a:	d815      	bhi.n	8000538 <displayHorizon+0x3c>
		return;
	buffer[0][1] = num % 10;
 800050c:	79fa      	ldrb	r2, [r7, #7]
 800050e:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <displayHorizon+0x48>)
 8000510:	fba3 1302 	umull	r1, r3, r3, r2
 8000514:	08d9      	lsrs	r1, r3, #3
 8000516:	460b      	mov	r3, r1
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	440b      	add	r3, r1
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	1ad3      	subs	r3, r2, r3
 8000520:	b2da      	uxtb	r2, r3
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <displayHorizon+0x4c>)
 8000524:	705a      	strb	r2, [r3, #1]
	buffer[0][0] = num / 10;
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <displayHorizon+0x48>)
 800052a:	fba2 2303 	umull	r2, r3, r2, r3
 800052e:	08db      	lsrs	r3, r3, #3
 8000530:	b2da      	uxtb	r2, r3
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <displayHorizon+0x4c>)
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e000      	b.n	800053a <displayHorizon+0x3e>
		return;
 8000538:	bf00      	nop
}
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	cccccccd 	.word	0xcccccccd
 8000548:	20000034 	.word	0x20000034

0800054c <update7seg>:
 * Update 7-segment led
 * input: none
 * output: none
 * */
void update7seg()
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  if (get_flag(2))
 8000550:	2002      	movs	r0, #2
 8000552:	f000 fc2b 	bl	8000dac <get_flag>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d031      	beq.n	80005c0 <update7seg+0x74>
  {
	  set_timer(2, 25);
 800055c:	2119      	movs	r1, #25
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fc5c 	bl	8000e1c <set_timer>
	  HAL_GPIO_WritePin(GPIOB, ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	210f      	movs	r1, #15
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <update7seg+0x78>)
 800056a:	f001 f860 	bl	800162e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, ENV0_Pin << enable_counter, RESET);
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <update7seg+0x7c>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	2301      	movs	r3, #1
 8000576:	4093      	lsls	r3, r2
 8000578:	b29b      	uxth	r3, r3
 800057a:	2200      	movs	r2, #0
 800057c:	4619      	mov	r1, r3
 800057e:	4811      	ldr	r0, [pc, #68]	; (80005c4 <update7seg+0x78>)
 8000580:	f001 f855 	bl	800162e <HAL_GPIO_WritePin>
	  display7seg(buffer[enable_counter/2][enable_counter%2]);
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <update7seg+0x7c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	085b      	lsrs	r3, r3, #1
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <update7seg+0x7c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <update7seg+0x80>)
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	440a      	add	r2, r1
 800059c:	4413      	add	r3, r2
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fed9 	bl	8000358 <display7seg>
	  enable_counter++;
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <update7seg+0x7c>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	3301      	adds	r3, #1
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <update7seg+0x7c>)
 80005b0:	701a      	strb	r2, [r3, #0]
	  if (enable_counter > 3)
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <update7seg+0x7c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d902      	bls.n	80005c0 <update7seg+0x74>
		  enable_counter = 0;
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <update7seg+0x7c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
  }
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40010c00 	.word	0x40010c00
 80005c8:	20000038 	.word	0x20000038
 80005cc:	20000034 	.word	0x20000034

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fd29 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f8fd 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f983 	bl	80008e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e2:	f000 f935 	bl	8000850 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80005e6:	4879      	ldr	r0, [pc, #484]	; (80007cc <main+0x1fc>)
 80005e8:	f001 fc7e 	bl	8001ee8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /* Initialize initial value */
  // timer interupt
  set_timer(0, 2);	// change mode
 80005ec:	2102      	movs	r1, #2
 80005ee:	2000      	movs	r0, #0
 80005f0:	f000 fc14 	bl	8000e1c <set_timer>
  set_timer(1, 2);	// blink led
 80005f4:	2102      	movs	r1, #2
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fc10 	bl	8000e1c <set_timer>
  set_timer(2, 2);	// scan 7-segment led
 80005fc:	2102      	movs	r1, #2
 80005fe:	2002      	movs	r0, #2
 8000600:	f000 fc0c 	bl	8000e1c <set_timer>
  // led
  HAL_GPIO_WritePin(V_RED_GPIO_Port, V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin|
 8000604:	2201      	movs	r2, #1
 8000606:	217e      	movs	r1, #126	; 0x7e
 8000608:	4871      	ldr	r0, [pc, #452]	; (80007d0 <main+0x200>)
 800060a:	f001 f810 	bl	800162e <HAL_GPIO_WritePin>
						   H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin, SET);
  // button
  init_button_state();
 800060e:	f7ff fd9d 	bl	800014c <init_button_state>
  STATE button[MAX_BUTTON];
  button[0] = NORMAL;
 8000612:	2300      	movs	r3, #0
 8000614:	703b      	strb	r3, [r7, #0]
  button[1] = NORMAL;
 8000616:	2300      	movs	r3, #0
 8000618:	707b      	strb	r3, [r7, #1]
  button[2] = NORMAL;
 800061a:	2300      	movs	r3, #0
 800061c:	70bb      	strb	r3, [r7, #2]
  // finite state machine
  FSM_STATE state = MODE_1;
 800061e:	2301      	movs	r3, #1
 8000620:	71fb      	strb	r3, [r7, #7]
  setState1(INIT);
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fb1c 	bl	8000c60 <setState1>
  mode1();
 8000628:	f000 f9e6 	bl	80009f8 <mode1>
  TRAFFIC start_state = RED_GREEN;
 800062c:	2301      	movs	r3, #1
 800062e:	71bb      	strb	r3, [r7, #6]
  setState1(start_state);
 8000630:	79bb      	ldrb	r3, [r7, #6]
 8000632:	4618      	mov	r0, r3
 8000634:	f000 fb14 	bl	8000c60 <setState1>
  // 7-segment led
  HAL_GPIO_WritePin(GPIOB, ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	210f      	movs	r1, #15
 800063c:	4865      	ldr	r0, [pc, #404]	; (80007d4 <main+0x204>)
 800063e:	f000 fff6 	bl	800162e <HAL_GPIO_WritePin>


  while (1)
  {
	  if (isPressed(0))
 8000642:	2000      	movs	r0, #0
 8000644:	f7ff fdda 	bl	80001fc <isPressed>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d002      	beq.n	8000654 <main+0x84>
		  button[0] = PRESSED;
 800064e:	2301      	movs	r3, #1
 8000650:	703b      	strb	r3, [r7, #0]
 8000652:	e00a      	b.n	800066a <main+0x9a>
	  else if (isLongPressed(0))
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fde9 	bl	800022c <isLongPressed>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <main+0x96>
		  button[0] = LONG_PRESSED;
 8000660:	2302      	movs	r3, #2
 8000662:	703b      	strb	r3, [r7, #0]
 8000664:	e001      	b.n	800066a <main+0x9a>
	  else
		  button[0] = NORMAL;
 8000666:	2300      	movs	r3, #0
 8000668:	703b      	strb	r3, [r7, #0]

	  if (isPressed(1))
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff fdc6 	bl	80001fc <isPressed>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <main+0xac>
  		  button[1] = PRESSED;
 8000676:	2301      	movs	r3, #1
 8000678:	707b      	strb	r3, [r7, #1]
 800067a:	e00a      	b.n	8000692 <main+0xc2>
  	  else if (isLongPressed(1))
 800067c:	2001      	movs	r0, #1
 800067e:	f7ff fdd5 	bl	800022c <isLongPressed>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <main+0xbe>
  		  button[1] = LONG_PRESSED;
 8000688:	2302      	movs	r3, #2
 800068a:	707b      	strb	r3, [r7, #1]
 800068c:	e001      	b.n	8000692 <main+0xc2>
  	  else
  		  button[1] = NORMAL;
 800068e:	2300      	movs	r3, #0
 8000690:	707b      	strb	r3, [r7, #1]

	  if (isPressed(2))
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff fdb2 	bl	80001fc <isPressed>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d002      	beq.n	80006a4 <main+0xd4>
  		  button[2] = PRESSED;
 800069e:	2301      	movs	r3, #1
 80006a0:	70bb      	strb	r3, [r7, #2]
 80006a2:	e00a      	b.n	80006ba <main+0xea>
 	  else if (isLongPressed(0))
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff fdc1 	bl	800022c <isLongPressed>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0xe6>
  		  button[2] = LONG_PRESSED;
 80006b0:	2302      	movs	r3, #2
 80006b2:	70bb      	strb	r3, [r7, #2]
 80006b4:	e001      	b.n	80006ba <main+0xea>
  	  else
  		  button[2] = NORMAL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	70bb      	strb	r3, [r7, #2]

	  switch (button[0])
 80006ba:	783b      	ldrb	r3, [r7, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d02f      	beq.n	8000720 <main+0x150>
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	dc2f      	bgt.n	8000724 <main+0x154>
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d02f      	beq.n	8000728 <main+0x158>
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d000      	beq.n	80006ce <main+0xfe>
		  break;
		  }
	  case LONG_PRESSED:
		  break;
	  default:
		  break;
 80006cc:	e02a      	b.n	8000724 <main+0x154>
		  if (state >= MODE_4)
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d902      	bls.n	80006da <main+0x10a>
			  state = MODE_1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	e002      	b.n	80006e0 <main+0x110>
			  state++;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	3301      	adds	r3, #1
 80006de:	71fb      	strb	r3, [r7, #7]
		  switch(state)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	3b01      	subs	r3, #1
 80006e4:	2b03      	cmp	r3, #3
 80006e6:	d81b      	bhi.n	8000720 <main+0x150>
 80006e8:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <main+0x120>)
 80006ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ee:	bf00      	nop
 80006f0:	08000701 	.word	0x08000701
 80006f4:	08000709 	.word	0x08000709
 80006f8:	08000711 	.word	0x08000711
 80006fc:	08000719 	.word	0x08000719
			  setState1(INIT);
 8000700:	2000      	movs	r0, #0
 8000702:	f000 faad 	bl	8000c60 <setState1>
			  break;
 8000706:	e00b      	b.n	8000720 <main+0x150>
			  setState2(MODE2_INIT);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 fadb 	bl	8000cc4 <setState2>
			  break;
 800070e:	e007      	b.n	8000720 <main+0x150>
			  setState3(MODE3_INIT);
 8000710:	2000      	movs	r0, #0
 8000712:	f000 fb09 	bl	8000d28 <setState3>
			  break;
 8000716:	e003      	b.n	8000720 <main+0x150>
			  setState4(MODE4_INIT);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fb37 	bl	8000d8c <setState4>
			  break;
 800071e:	bf00      	nop
		  break;
 8000720:	bf00      	nop
 8000722:	e002      	b.n	800072a <main+0x15a>
		  break;
 8000724:	bf00      	nop
 8000726:	e000      	b.n	800072a <main+0x15a>
		  break;
 8000728:	bf00      	nop
	  }

	  switch (button[1])
 800072a:	787b      	ldrb	r3, [r7, #1]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d006      	beq.n	800073e <main+0x16e>
 8000730:	2b02      	cmp	r3, #2
 8000732:	dc06      	bgt.n	8000742 <main+0x172>
 8000734:	2b00      	cmp	r3, #0
 8000736:	d006      	beq.n	8000746 <main+0x176>
 8000738:	2b01      	cmp	r3, #1
 800073a:	d006      	beq.n	800074a <main+0x17a>
	  case PRESSED:
		  break;
	  case LONG_PRESSED:
		  break;
	  default:
		  break;
 800073c:	e001      	b.n	8000742 <main+0x172>
		  break;
 800073e:	bf00      	nop
 8000740:	e004      	b.n	800074c <main+0x17c>
		  break;
 8000742:	bf00      	nop
 8000744:	e002      	b.n	800074c <main+0x17c>
		  break;
 8000746:	bf00      	nop
 8000748:	e000      	b.n	800074c <main+0x17c>
		  break;
 800074a:	bf00      	nop
	  }

	  switch (button[2])
 800074c:	78bb      	ldrb	r3, [r7, #2]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d006      	beq.n	8000760 <main+0x190>
 8000752:	2b02      	cmp	r3, #2
 8000754:	dc06      	bgt.n	8000764 <main+0x194>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d006      	beq.n	8000768 <main+0x198>
 800075a:	2b01      	cmp	r3, #1
 800075c:	d006      	beq.n	800076c <main+0x19c>
	  case PRESSED:
		  break;
	  case LONG_PRESSED:
		  break;
	  default:
		  break;
 800075e:	e001      	b.n	8000764 <main+0x194>
		  break;
 8000760:	bf00      	nop
 8000762:	e004      	b.n	800076e <main+0x19e>
		  break;
 8000764:	bf00      	nop
 8000766:	e002      	b.n	800076e <main+0x19e>
		  break;
 8000768:	bf00      	nop
 800076a:	e000      	b.n	800076e <main+0x19e>
		  break;
 800076c:	bf00      	nop
	  }

	  switch (state)
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3b01      	subs	r3, #1
 8000772:	2b03      	cmp	r3, #3
 8000774:	d825      	bhi.n	80007c2 <main+0x1f2>
 8000776:	a201      	add	r2, pc, #4	; (adr r2, 800077c <main+0x1ac>)
 8000778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077c:	0800078d 	.word	0x0800078d
 8000780:	08000793 	.word	0x08000793
 8000784:	080007a3 	.word	0x080007a3
 8000788:	080007b3 	.word	0x080007b3
	  {
	  case MODE_1:
		  mode1();
 800078c:	f000 f934 	bl	80009f8 <mode1>
		  break;
 8000790:	e018      	b.n	80007c4 <main+0x1f4>
	  case MODE_2:
		  mode2();
 8000792:	f000 fa75 	bl	8000c80 <mode2>
		  displayVertical(2);
 8000796:	2002      	movs	r0, #2
 8000798:	f7ff fe88 	bl	80004ac <displayVertical>
		  blinkRed();
 800079c:	f000 fbe4 	bl	8000f68 <blinkRed>
		  break;
 80007a0:	e010      	b.n	80007c4 <main+0x1f4>
	  case MODE_3:
		  mode3();
 80007a2:	f000 fa9f 	bl	8000ce4 <mode3>
		  displayVertical(3);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f7ff fe80 	bl	80004ac <displayVertical>
		  blinkYellow();
 80007ac:	f000 fbf0 	bl	8000f90 <blinkYellow>
		  break;
 80007b0:	e008      	b.n	80007c4 <main+0x1f4>
	  case MODE_4:
		  mode4();
 80007b2:	f000 fac9 	bl	8000d48 <mode4>
		  displayVertical(4);
 80007b6:	2004      	movs	r0, #4
 80007b8:	f7ff fe78 	bl	80004ac <displayVertical>
		  blinkGreen();
 80007bc:	f000 fbfc 	bl	8000fb8 <blinkGreen>
		  break;
 80007c0:	e000      	b.n	80007c4 <main+0x1f4>
	  default:
		  break;
 80007c2:	bf00      	nop
	  }

	  update7seg();
 80007c4:	f7ff fec2 	bl	800054c <update7seg>
	  if (isPressed(0))
 80007c8:	e73b      	b.n	8000642 <main+0x72>
 80007ca:	bf00      	nop
 80007cc:	200000a4 	.word	0x200000a4
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b090      	sub	sp, #64	; 0x40
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0318 	add.w	r3, r7, #24
 80007e2:	2228      	movs	r2, #40	; 0x28
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f001 ff3a 	bl	8002660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007fe:	2301      	movs	r3, #1
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000802:	2310      	movs	r3, #16
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ff3e 	bl	8001690 <HAL_RCC_OscConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800081a:	f000 f8e7 	bl	80009ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081e:	230f      	movs	r3, #15
 8000820:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f001 f9aa 	bl	8001b90 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000842:	f000 f8d3 	bl	80009ec <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3740      	adds	r7, #64	; 0x40
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000864:	463b      	mov	r3, r7
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_TIM2_Init+0x94>)
 800086e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000876:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800087a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_TIM2_Init+0x94>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000884:	2209      	movs	r2, #9
 8000886:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <MX_TIM2_Init+0x94>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000894:	4813      	ldr	r0, [pc, #76]	; (80008e4 <MX_TIM2_Init+0x94>)
 8000896:	f001 fad7 	bl	8001e48 <HAL_TIM_Base_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008a0:	f000 f8a4 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008aa:	f107 0308 	add.w	r3, r7, #8
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_TIM2_Init+0x94>)
 80008b2:	f001 fc6d 	bl	8002190 <HAL_TIM_ConfigClockSource>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008bc:	f000 f896 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	4619      	mov	r1, r3
 80008cc:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_TIM2_Init+0x94>)
 80008ce:	f001 fe39 	bl	8002544 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f888 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	200000a4 	.word	0x200000a4

080008e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b28      	ldr	r3, [pc, #160]	; (80009a0 <MX_GPIO_Init+0xb8>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a27      	ldr	r2, [pc, #156]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <MX_GPIO_Init+0xb8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f003 0304 	and.w	r3, r3, #4
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000914:	4b22      	ldr	r3, [pc, #136]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a21      	ldr	r2, [pc, #132]	; (80009a0 <MX_GPIO_Init+0xb8>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_GPIO_Init+0xb8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0308 	and.w	r3, r3, #8
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin|H_RED_Pin
 800092c:	2200      	movs	r2, #0
 800092e:	f643 71fe 	movw	r1, #16382	; 0x3ffe
 8000932:	481c      	ldr	r0, [pc, #112]	; (80009a4 <MX_GPIO_Init+0xbc>)
 8000934:	f000 fe7b 	bl	800162e <HAL_GPIO_WritePin>
                          |H_YELLOW_Pin|H_GREEN_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin, GPIO_PIN_RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	210f      	movs	r1, #15
 800093c:	481a      	ldr	r0, [pc, #104]	; (80009a8 <MX_GPIO_Init+0xc0>)
 800093e:	f000 fe76 	bl	800162e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : V_RED_Pin V_YELLOW_Pin V_GREEN_Pin H_RED_Pin
                           H_YELLOW_Pin H_GREEN_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin|H_RED_Pin
 8000942:	f643 73fe 	movw	r3, #16382	; 0x3ffe
 8000946:	60bb      	str	r3, [r7, #8]
                          |H_YELLOW_Pin|H_GREEN_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <MX_GPIO_Init+0xbc>)
 800095c:	f000 fcd6 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENV0_Pin ENV1_Pin ENH0_Pin ENH1_Pin */
  GPIO_InitStruct.Pin = ENV0_Pin|ENV1_Pin|ENH0_Pin|ENH1_Pin;
 8000960:	230f      	movs	r3, #15
 8000962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2302      	movs	r3, #2
 800096e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_GPIO_Init+0xc0>)
 8000978:	f000 fcc8 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 800097c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000986:	2301      	movs	r3, #1
 8000988:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_GPIO_Init+0xc0>)
 8000992:	f000 fcbb 	bl	800130c <HAL_GPIO_Init>

}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40010c00 	.word	0x40010c00

080009ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
	run_timer(0);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f000 fa09 	bl	8000dcc <run_timer>
	run_timer(1);
 80009ba:	2001      	movs	r0, #1
 80009bc:	f000 fa06 	bl	8000dcc <run_timer>
	run_timer(2);
 80009c0:	2002      	movs	r0, #2
 80009c2:	f000 fa03 	bl	8000dcc <run_timer>
	run_timer(3);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 fa00 	bl	8000dcc <run_timer>
	run_timer(4);
 80009cc:	2004      	movs	r0, #4
 80009ce:	f000 f9fd 	bl	8000dcc <run_timer>
	getKey(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fc42 	bl	800025c <getKey>
	getKey(1);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fc3f 	bl	800025c <getKey>
	getKey(2);
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff fc3c 	bl	800025c <getKey>
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <mode1>:
 * run mode 1 in state machine
 * input: none
 * output: none
 * */
void mode1()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	if (get_flag(0))
 80009fc:	2000      	movs	r0, #0
 80009fe:	f000 f9d5 	bl	8000dac <get_flag>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 8112 	beq.w	8000c2e <mode1+0x236>
	{
		set_timer(0, 100);
 8000a0a:	2164      	movs	r1, #100	; 0x64
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f000 fa05 	bl	8000e1c <set_timer>
		switch (state)
 8000a12:	4b8c      	ldr	r3, [pc, #560]	; (8000c44 <mode1+0x24c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	f200 8105 	bhi.w	8000c26 <mode1+0x22e>
 8000a1c:	a201      	add	r2, pc, #4	; (adr r2, 8000a24 <mode1+0x2c>)
 8000a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a22:	bf00      	nop
 8000a24:	08000a39 	.word	0x08000a39
 8000a28:	08000a65 	.word	0x08000a65
 8000a2c:	08000ad7 	.word	0x08000ad7
 8000a30:	08000b47 	.word	0x08000b47
 8000a34:	08000bb7 	.word	0x08000bb7
		{
		case INIT:
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000a38:	2201      	movs	r2, #1
 8000a3a:	217e      	movs	r1, #126	; 0x7e
 8000a3c:	4882      	ldr	r0, [pc, #520]	; (8000c48 <mode1+0x250>)
 8000a3e:	f000 fdf6 	bl	800162e <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			H_counter = 0;
 8000a42:	4b82      	ldr	r3, [pc, #520]	; (8000c4c <mode1+0x254>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
			V_counter = 0;
 8000a48:	4b81      	ldr	r3, [pc, #516]	; (8000c50 <mode1+0x258>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
			displayHorizon(0);
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f7ff fd54 	bl	80004fc <displayHorizon>
			displayVertical(0);
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff fd29 	bl	80004ac <displayVertical>
			set_timer(0, 2);
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f9dd 	bl	8000e1c <set_timer>
			break;
 8000a62:	e0ed      	b.n	8000c40 <mode1+0x248>
		case RED_GREEN:
			if (H_counter == 0)
 8000a64:	4b79      	ldr	r3, [pc, #484]	; (8000c4c <mode1+0x254>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d103      	bne.n	8000a74 <mode1+0x7c>
				H_counter = red;
 8000a6c:	4b79      	ldr	r3, [pc, #484]	; (8000c54 <mode1+0x25c>)
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <mode1+0x254>)
 8000a72:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000a74:	4b76      	ldr	r3, [pc, #472]	; (8000c50 <mode1+0x258>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d103      	bne.n	8000a84 <mode1+0x8c>
				V_counter = green;
 8000a7c:	4b76      	ldr	r3, [pc, #472]	; (8000c58 <mode1+0x260>)
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	4b73      	ldr	r3, [pc, #460]	; (8000c50 <mode1+0x258>)
 8000a82:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000a84:	2201      	movs	r2, #1
 8000a86:	217e      	movs	r1, #126	; 0x7e
 8000a88:	486f      	ldr	r0, [pc, #444]	; (8000c48 <mode1+0x250>)
 8000a8a:	f000 fdd0 	bl	800162e <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|V_GREEN_Pin, RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2118      	movs	r1, #24
 8000a92:	486d      	ldr	r0, [pc, #436]	; (8000c48 <mode1+0x250>)
 8000a94:	f000 fdcb 	bl	800162e <HAL_GPIO_WritePin>
			H_counter--;
 8000a98:	4b6c      	ldr	r3, [pc, #432]	; (8000c4c <mode1+0x254>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b6a      	ldr	r3, [pc, #424]	; (8000c4c <mode1+0x254>)
 8000aa2:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000aa4:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <mode1+0x258>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b68      	ldr	r3, [pc, #416]	; (8000c50 <mode1+0x258>)
 8000aae:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000ab0:	4b66      	ldr	r3, [pc, #408]	; (8000c4c <mode1+0x254>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fd21 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000aba:	4b65      	ldr	r3, [pc, #404]	; (8000c50 <mode1+0x258>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fcf4 	bl	80004ac <displayVertical>
			if (V_counter == 0)
 8000ac4:	4b62      	ldr	r3, [pc, #392]	; (8000c50 <mode1+0x258>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f040 80b2 	bne.w	8000c32 <mode1+0x23a>
				state = RED_YELLOW;
 8000ace:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <mode1+0x24c>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	701a      	strb	r2, [r3, #0]
			break;
 8000ad4:	e0ad      	b.n	8000c32 <mode1+0x23a>
		case RED_YELLOW:
			if (H_counter == 0)
 8000ad6:	4b5d      	ldr	r3, [pc, #372]	; (8000c4c <mode1+0x254>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d103      	bne.n	8000ae6 <mode1+0xee>
				H_counter = red;
 8000ade:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <mode1+0x25c>)
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	4b5a      	ldr	r3, [pc, #360]	; (8000c4c <mode1+0x254>)
 8000ae4:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <mode1+0x258>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d103      	bne.n	8000af6 <mode1+0xfe>
				V_counter = yellow;
 8000aee:	4b5b      	ldr	r3, [pc, #364]	; (8000c5c <mode1+0x264>)
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	4b57      	ldr	r3, [pc, #348]	; (8000c50 <mode1+0x258>)
 8000af4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000af6:	2201      	movs	r2, #1
 8000af8:	217e      	movs	r1, #126	; 0x7e
 8000afa:	4853      	ldr	r0, [pc, #332]	; (8000c48 <mode1+0x250>)
 8000afc:	f000 fd97 	bl	800162e <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|V_YELLOW_Pin, RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2114      	movs	r1, #20
 8000b04:	4850      	ldr	r0, [pc, #320]	; (8000c48 <mode1+0x250>)
 8000b06:	f000 fd92 	bl	800162e <HAL_GPIO_WritePin>
			H_counter--;
 8000b0a:	4b50      	ldr	r3, [pc, #320]	; (8000c4c <mode1+0x254>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4b4e      	ldr	r3, [pc, #312]	; (8000c4c <mode1+0x254>)
 8000b14:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000b16:	4b4e      	ldr	r3, [pc, #312]	; (8000c50 <mode1+0x258>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b4c      	ldr	r3, [pc, #304]	; (8000c50 <mode1+0x258>)
 8000b20:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000b22:	4b4a      	ldr	r3, [pc, #296]	; (8000c4c <mode1+0x254>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fce8 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000b2c:	4b48      	ldr	r3, [pc, #288]	; (8000c50 <mode1+0x258>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fcbb 	bl	80004ac <displayVertical>
			if (V_counter == 0)
 8000b36:	4b46      	ldr	r3, [pc, #280]	; (8000c50 <mode1+0x258>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d17b      	bne.n	8000c36 <mode1+0x23e>
				state = GREEN_RED;
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <mode1+0x24c>)
 8000b40:	2203      	movs	r2, #3
 8000b42:	701a      	strb	r2, [r3, #0]
			break;
 8000b44:	e077      	b.n	8000c36 <mode1+0x23e>
		case GREEN_RED:
			if (H_counter == 0)
 8000b46:	4b41      	ldr	r3, [pc, #260]	; (8000c4c <mode1+0x254>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d103      	bne.n	8000b56 <mode1+0x15e>
				H_counter = green;
 8000b4e:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <mode1+0x260>)
 8000b50:	781a      	ldrb	r2, [r3, #0]
 8000b52:	4b3e      	ldr	r3, [pc, #248]	; (8000c4c <mode1+0x254>)
 8000b54:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000b56:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <mode1+0x258>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d103      	bne.n	8000b66 <mode1+0x16e>
				V_counter = red;
 8000b5e:	4b3d      	ldr	r3, [pc, #244]	; (8000c54 <mode1+0x25c>)
 8000b60:	781a      	ldrb	r2, [r3, #0]
 8000b62:	4b3b      	ldr	r3, [pc, #236]	; (8000c50 <mode1+0x258>)
 8000b64:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000b66:	2201      	movs	r2, #1
 8000b68:	217e      	movs	r1, #126	; 0x7e
 8000b6a:	4837      	ldr	r0, [pc, #220]	; (8000c48 <mode1+0x250>)
 8000b6c:	f000 fd5f 	bl	800162e <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_GREEN_Pin|V_RED_Pin, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2142      	movs	r1, #66	; 0x42
 8000b74:	4834      	ldr	r0, [pc, #208]	; (8000c48 <mode1+0x250>)
 8000b76:	f000 fd5a 	bl	800162e <HAL_GPIO_WritePin>
			H_counter--;
 8000b7a:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <mode1+0x254>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <mode1+0x254>)
 8000b84:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <mode1+0x258>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <mode1+0x258>)
 8000b90:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000b92:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <mode1+0x254>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fcb0 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <mode1+0x258>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fc83 	bl	80004ac <displayVertical>
			if (H_counter == 0)
 8000ba6:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <mode1+0x254>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d145      	bne.n	8000c3a <mode1+0x242>
				state = YELLOW_RED;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <mode1+0x24c>)
 8000bb0:	2204      	movs	r2, #4
 8000bb2:	701a      	strb	r2, [r3, #0]
			break;
 8000bb4:	e041      	b.n	8000c3a <mode1+0x242>
		case YELLOW_RED:
			if (H_counter == 0)
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <mode1+0x254>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <mode1+0x1ce>
				H_counter = yellow;
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <mode1+0x264>)
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <mode1+0x254>)
 8000bc4:	701a      	strb	r2, [r3, #0]
			if (V_counter == 0)
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <mode1+0x258>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d103      	bne.n	8000bd6 <mode1+0x1de>
				V_counter = red;
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <mode1+0x25c>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <mode1+0x258>)
 8000bd4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	217e      	movs	r1, #126	; 0x7e
 8000bda:	481b      	ldr	r0, [pc, #108]	; (8000c48 <mode1+0x250>)
 8000bdc:	f000 fd27 	bl	800162e <HAL_GPIO_WritePin>
									 V_RED_Pin|V_YELLOW_Pin|V_GREEN_Pin, SET);
			HAL_GPIO_WritePin(GPIOA, H_YELLOW_Pin|V_RED_Pin, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2122      	movs	r1, #34	; 0x22
 8000be4:	4818      	ldr	r0, [pc, #96]	; (8000c48 <mode1+0x250>)
 8000be6:	f000 fd22 	bl	800162e <HAL_GPIO_WritePin>
			H_counter--;
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <mode1+0x254>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <mode1+0x254>)
 8000bf4:	701a      	strb	r2, [r3, #0]
			V_counter--;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <mode1+0x258>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <mode1+0x258>)
 8000c00:	701a      	strb	r2, [r3, #0]
			displayHorizon(H_counter);
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <mode1+0x254>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fc78 	bl	80004fc <displayHorizon>
			displayVertical(V_counter);
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <mode1+0x258>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fc4b 	bl	80004ac <displayVertical>
			if (H_counter == 0)
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <mode1+0x254>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10f      	bne.n	8000c3e <mode1+0x246>
				state = RED_GREEN;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <mode1+0x24c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
			break;
 8000c24:	e00b      	b.n	8000c3e <mode1+0x246>
		default:
			state = INIT;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <mode1+0x24c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
			break;
 8000c2c:	e008      	b.n	8000c40 <mode1+0x248>
		}
	}
 8000c2e:	bf00      	nop
 8000c30:	e006      	b.n	8000c40 <mode1+0x248>
			break;
 8000c32:	bf00      	nop
 8000c34:	e004      	b.n	8000c40 <mode1+0x248>
			break;
 8000c36:	bf00      	nop
 8000c38:	e002      	b.n	8000c40 <mode1+0x248>
			break;
 8000c3a:	bf00      	nop
 8000c3c:	e000      	b.n	8000c40 <mode1+0x248>
			break;
 8000c3e:	bf00      	nop
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200000ec 	.word	0x200000ec
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	20000039 	.word	0x20000039
 8000c50:	2000003a 	.word	0x2000003a
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000002 	.word	0x20000002
 8000c5c:	20000001 	.word	0x20000001

08000c60 <setState1>:
 * Set state for mode 1
 * input: current state
 * output: none
 * */
void setState1(TRAFFIC cur_state)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <setState1+0x1c>)
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	7013      	strb	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000ec 	.word	0x200000ec

08000c80 <mode2>:
#include "mode2.h"

MODE2_STATE state;

void mode2()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	switch (state)
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <mode2+0x3c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d00f      	beq.n	8000cac <mode2+0x2c>
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	dc0f      	bgt.n	8000cb0 <mode2+0x30>
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d002      	beq.n	8000c9a <mode2+0x1a>
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d00d      	beq.n	8000cb4 <mode2+0x34>
		break;
	case MODE2_SET_TIME:
		// set time duration
		break;
	default:
		break;
 8000c98:	e00a      	b.n	8000cb0 <mode2+0x30>
		HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	217e      	movs	r1, #126	; 0x7e
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <mode2+0x40>)
 8000ca0:	f000 fcc5 	bl	800162e <HAL_GPIO_WritePin>
		state = MODE2_INCREASE;
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <mode2+0x3c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
		break;
 8000caa:	e004      	b.n	8000cb6 <mode2+0x36>
		break;
 8000cac:	bf00      	nop
 8000cae:	e002      	b.n	8000cb6 <mode2+0x36>
		break;
 8000cb0:	bf00      	nop
 8000cb2:	e000      	b.n	8000cb6 <mode2+0x36>
		break;
 8000cb4:	bf00      	nop
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000ec 	.word	0x200000ec
 8000cc0:	40010800 	.word	0x40010800

08000cc4 <setState2>:

void setState2(MODE2_STATE cur_state)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <setState2+0x1c>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	7013      	strb	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	200000ec 	.word	0x200000ec

08000ce4 <mode3>:
#include "mode3.h"

MODE3_STATE state;

void mode3()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	switch (state)
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <mode3+0x3c>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d00f      	beq.n	8000d10 <mode3+0x2c>
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	dc0f      	bgt.n	8000d14 <mode3+0x30>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <mode3+0x1a>
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	d00d      	beq.n	8000d18 <mode3+0x34>
		break;
	case MODE3_SET_TIME:
		// set time duration
		break;
	default:
		break;
 8000cfc:	e00a      	b.n	8000d14 <mode3+0x30>
		HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000cfe:	2201      	movs	r2, #1
 8000d00:	217e      	movs	r1, #126	; 0x7e
 8000d02:	4808      	ldr	r0, [pc, #32]	; (8000d24 <mode3+0x40>)
 8000d04:	f000 fc93 	bl	800162e <HAL_GPIO_WritePin>
		state = MODE3_INCREASE;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <mode3+0x3c>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	701a      	strb	r2, [r3, #0]
		break;
 8000d0e:	e004      	b.n	8000d1a <mode3+0x36>
		break;
 8000d10:	bf00      	nop
 8000d12:	e002      	b.n	8000d1a <mode3+0x36>
		break;
 8000d14:	bf00      	nop
 8000d16:	e000      	b.n	8000d1a <mode3+0x36>
		break;
 8000d18:	bf00      	nop
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200000ec 	.word	0x200000ec
 8000d24:	40010800 	.word	0x40010800

08000d28 <setState3>:

void setState3(MODE3_STATE cur_state)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <setState3+0x1c>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	7013      	strb	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	200000ec 	.word	0x200000ec

08000d48 <mode4>:
#include "mode4.h"

MODE4_STATE state;

void mode4()
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	switch (state)
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <mode4+0x3c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d00f      	beq.n	8000d74 <mode4+0x2c>
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	dc0f      	bgt.n	8000d78 <mode4+0x30>
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d002      	beq.n	8000d62 <mode4+0x1a>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00d      	beq.n	8000d7c <mode4+0x34>
		break;
	case MODE4_SET_TIME:
		// set time duration
		break;
	default:
		break;
 8000d60:	e00a      	b.n	8000d78 <mode4+0x30>
		HAL_GPIO_WritePin(GPIOA, H_RED_Pin|H_YELLOW_Pin|H_GREEN_Pin|
 8000d62:	2201      	movs	r2, #1
 8000d64:	217e      	movs	r1, #126	; 0x7e
 8000d66:	4808      	ldr	r0, [pc, #32]	; (8000d88 <mode4+0x40>)
 8000d68:	f000 fc61 	bl	800162e <HAL_GPIO_WritePin>
		state = MODE4_INCREASE;
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <mode4+0x3c>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
		break;
 8000d72:	e004      	b.n	8000d7e <mode4+0x36>
		break;
 8000d74:	bf00      	nop
 8000d76:	e002      	b.n	8000d7e <mode4+0x36>
		break;
 8000d78:	bf00      	nop
 8000d7a:	e000      	b.n	8000d7e <mode4+0x36>
		break;
 8000d7c:	bf00      	nop
	}
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000ec 	.word	0x200000ec
 8000d88:	40010800 	.word	0x40010800

08000d8c <setState4>:

void setState4(MODE4_STATE cur_state)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	state = cur_state;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <setState4+0x1c>)
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	7013      	strb	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	200000ec 	.word	0x200000ec

08000dac <get_flag>:
Get flag of timer
input: ID of timer
output: flag of this timer
*/
int get_flag(int idx_timer)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
    return flag[idx_timer];
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <get_flag+0x1c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000003c 	.word	0x2000003c

08000dcc <run_timer>:
Count down and triggle the flag when counter = 0
input: ID of timer
output: none
*/
void run_timer(int idx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
    if (timer_counter[idx] > 0)
 8000dd4:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <run_timer+0x48>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	dd13      	ble.n	8000e08 <run_timer+0x3c>
    {
        timer_counter[idx]--;
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <run_timer+0x48>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	490a      	ldr	r1, [pc, #40]	; (8000e14 <run_timer+0x48>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (timer_counter[idx] == 0)
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <run_timer+0x48>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d104      	bne.n	8000e08 <run_timer+0x3c>
        {
            flag[idx] = 1;
 8000dfe:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <run_timer+0x4c>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2101      	movs	r1, #1
 8000e04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }
    }
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000064 	.word	0x20000064
 8000e18:	2000003c 	.word	0x2000003c

08000e1c <set_timer>:
Set the time for timer
input: ID of timer and duration of this timer
output: none
*/
void set_timer(int idx_timer, int duration)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
    flag[idx_timer] = 0;
 8000e26:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <set_timer+0x28>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    timer_counter[idx_timer] = duration;
 8000e30:	4905      	ldr	r1, [pc, #20]	; (8000e48 <set_timer+0x2c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	2000003c 	.word	0x2000003c
 8000e48:	20000064 	.word	0x20000064

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_MspInit+0x60>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_MspInit+0x60>)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40010000 	.word	0x40010000

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d113      	bne.n	8000eea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	61d3      	str	r3, [r2, #28]
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	201c      	movs	r0, #28
 8000ee0:	f000 f9dd 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ee4:	201c      	movs	r0, #28
 8000ee6:	f000 f9f6 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr

08000f3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3e:	f000 f8bb 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM2_IRQHandler+0x10>)
 8000f4e:	f001 f817 	bl	8001f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200000a4 	.word	0x200000a4

08000f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <blinkRed>:
 * Blink led red with frequency = 2Hz
 * input: none
 * output: none
 * */
void blinkRed()
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	if (get_flag(1))
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ff1d 	bl	8000dac <get_flag>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <blinkRed+0x20>
	{
		set_timer(1, BLINK_LED);
 8000f78:	2119      	movs	r1, #25
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff ff4e 	bl	8000e1c <set_timer>
		HAL_GPIO_TogglePin(GPIOA, V_RED_Pin|H_RED_Pin);
 8000f80:	2112      	movs	r1, #18
 8000f82:	4802      	ldr	r0, [pc, #8]	; (8000f8c <blinkRed+0x24>)
 8000f84:	f000 fb6b 	bl	800165e <HAL_GPIO_TogglePin>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40010800 	.word	0x40010800

08000f90 <blinkYellow>:
 * Blink led yellow with frequency = 2Hz
 * input: none
 * output: none
 * */
void blinkYellow()
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	if (get_flag(1))
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff ff09 	bl	8000dac <get_flag>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d007      	beq.n	8000fb0 <blinkYellow+0x20>
	{
		set_timer(1, BLINK_LED);
 8000fa0:	2119      	movs	r1, #25
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff ff3a 	bl	8000e1c <set_timer>
		HAL_GPIO_TogglePin(GPIOA, V_YELLOW_Pin|H_YELLOW_Pin);
 8000fa8:	2124      	movs	r1, #36	; 0x24
 8000faa:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <blinkYellow+0x24>)
 8000fac:	f000 fb57 	bl	800165e <HAL_GPIO_TogglePin>
	}
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40010800 	.word	0x40010800

08000fb8 <blinkGreen>:
 * Blink led green with frequency = 2Hz
 * input: none
 * output: none
 * */
void blinkGreen()
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	if (get_flag(1))
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fef5 	bl	8000dac <get_flag>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d007      	beq.n	8000fd8 <blinkGreen+0x20>
	{
		set_timer(1, BLINK_LED);
 8000fc8:	2119      	movs	r1, #25
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff ff26 	bl	8000e1c <set_timer>
		HAL_GPIO_TogglePin(GPIOA, V_GREEN_Pin|H_GREEN_Pin);
 8000fd0:	2148      	movs	r1, #72	; 0x48
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <blinkGreen+0x24>)
 8000fd4:	f000 fb43 	bl	800165e <HAL_GPIO_TogglePin>
	}
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe0:	f7ff ffbc 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ffc:	4c09      	ldr	r4, [pc, #36]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f001 fb05 	bl	8002618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100e:	f7ff fadf 	bl	80005d0 <main>
  bx lr
 8001012:	4770      	bx	lr
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800101c:	080026b4 	.word	0x080026b4
  ldr r2, =_sbss
 8001020:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001024:	200000f4 	.word	0x200000f4

08001028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x28>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f923 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	200f      	movs	r0, #15
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff ff00 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f93b 	bl	80012f2 <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f903 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000008 	.word	0x20000008

080010b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_IncTick+0x1c>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x20>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <HAL_IncTick+0x20>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	200000f0 	.word	0x200000f0

080010dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b02      	ldr	r3, [pc, #8]	; (80010ec <HAL_GetTick+0x10>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	200000f0 	.word	0x200000f0

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	; (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	2b00      	cmp	r3, #0
 8001164:	db0b      	blt.n	800117e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	f003 021f 	and.w	r2, r3, #31
 800116c:	4906      	ldr	r1, [pc, #24]	; (8001188 <__NVIC_EnableIRQ+0x34>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	095b      	lsrs	r3, r3, #5
 8001174:	2001      	movs	r0, #1
 8001176:	fa00 f202 	lsl.w	r2, r0, r2
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	; (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	; (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	; 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff90 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff2d 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff42 	bl	8001138 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff35 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa2 	bl	8001244 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b08b      	sub	sp, #44	; 0x2c
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131e:	e148      	b.n	80015b2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001320:	2201      	movs	r2, #1
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	429a      	cmp	r2, r3
 800133a:	f040 8137 	bne.w	80015ac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	4aa3      	ldr	r2, [pc, #652]	; (80015d0 <HAL_GPIO_Init+0x2c4>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d05e      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001348:	4aa1      	ldr	r2, [pc, #644]	; (80015d0 <HAL_GPIO_Init+0x2c4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d875      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 800134e:	4aa1      	ldr	r2, [pc, #644]	; (80015d4 <HAL_GPIO_Init+0x2c8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d058      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001354:	4a9f      	ldr	r2, [pc, #636]	; (80015d4 <HAL_GPIO_Init+0x2c8>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d86f      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 800135a:	4a9f      	ldr	r2, [pc, #636]	; (80015d8 <HAL_GPIO_Init+0x2cc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d052      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001360:	4a9d      	ldr	r2, [pc, #628]	; (80015d8 <HAL_GPIO_Init+0x2cc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d869      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 8001366:	4a9d      	ldr	r2, [pc, #628]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d04c      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 800136c:	4a9b      	ldr	r2, [pc, #620]	; (80015dc <HAL_GPIO_Init+0x2d0>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d863      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 8001372:	4a9b      	ldr	r2, [pc, #620]	; (80015e0 <HAL_GPIO_Init+0x2d4>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d046      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
 8001378:	4a99      	ldr	r2, [pc, #612]	; (80015e0 <HAL_GPIO_Init+0x2d4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d85d      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 800137e:	2b12      	cmp	r3, #18
 8001380:	d82a      	bhi.n	80013d8 <HAL_GPIO_Init+0xcc>
 8001382:	2b12      	cmp	r3, #18
 8001384:	d859      	bhi.n	800143a <HAL_GPIO_Init+0x12e>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <HAL_GPIO_Init+0x80>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	08001407 	.word	0x08001407
 8001390:	080013e1 	.word	0x080013e1
 8001394:	080013f3 	.word	0x080013f3
 8001398:	08001435 	.word	0x08001435
 800139c:	0800143b 	.word	0x0800143b
 80013a0:	0800143b 	.word	0x0800143b
 80013a4:	0800143b 	.word	0x0800143b
 80013a8:	0800143b 	.word	0x0800143b
 80013ac:	0800143b 	.word	0x0800143b
 80013b0:	0800143b 	.word	0x0800143b
 80013b4:	0800143b 	.word	0x0800143b
 80013b8:	0800143b 	.word	0x0800143b
 80013bc:	0800143b 	.word	0x0800143b
 80013c0:	0800143b 	.word	0x0800143b
 80013c4:	0800143b 	.word	0x0800143b
 80013c8:	0800143b 	.word	0x0800143b
 80013cc:	0800143b 	.word	0x0800143b
 80013d0:	080013e9 	.word	0x080013e9
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	4a82      	ldr	r2, [pc, #520]	; (80015e4 <HAL_GPIO_Init+0x2d8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013de:	e02c      	b.n	800143a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	623b      	str	r3, [r7, #32]
          break;
 80013e6:	e029      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	3304      	adds	r3, #4
 80013ee:	623b      	str	r3, [r7, #32]
          break;
 80013f0:	e024      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	3308      	adds	r3, #8
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e01f      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	330c      	adds	r3, #12
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e01a      	b.n	800143c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800140e:	2304      	movs	r3, #4
 8001410:	623b      	str	r3, [r7, #32]
          break;
 8001412:	e013      	b.n	800143c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d105      	bne.n	8001428 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800141c:	2308      	movs	r3, #8
 800141e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	611a      	str	r2, [r3, #16]
          break;
 8001426:	e009      	b.n	800143c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001428:	2308      	movs	r3, #8
 800142a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69fa      	ldr	r2, [r7, #28]
 8001430:	615a      	str	r2, [r3, #20]
          break;
 8001432:	e003      	b.n	800143c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
          break;
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x130>
          break;
 800143a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2bff      	cmp	r3, #255	; 0xff
 8001440:	d801      	bhi.n	8001446 <HAL_GPIO_Init+0x13a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	e001      	b.n	800144a <HAL_GPIO_Init+0x13e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2bff      	cmp	r3, #255	; 0xff
 8001450:	d802      	bhi.n	8001458 <HAL_GPIO_Init+0x14c>
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	e002      	b.n	800145e <HAL_GPIO_Init+0x152>
 8001458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145a:	3b08      	subs	r3, #8
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	210f      	movs	r1, #15
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	6a39      	ldr	r1, [r7, #32]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	431a      	orrs	r2, r3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8090 	beq.w	80015ac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800148c:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <HAL_GPIO_Init+0x2dc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014a4:	4a51      	ldr	r2, [pc, #324]	; (80015ec <HAL_GPIO_Init+0x2e0>)
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	220f      	movs	r2, #15
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a49      	ldr	r2, [pc, #292]	; (80015f0 <HAL_GPIO_Init+0x2e4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d00d      	beq.n	80014ec <HAL_GPIO_Init+0x1e0>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_GPIO_Init+0x2e8>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d007      	beq.n	80014e8 <HAL_GPIO_Init+0x1dc>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a47      	ldr	r2, [pc, #284]	; (80015f8 <HAL_GPIO_Init+0x2ec>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d101      	bne.n	80014e4 <HAL_GPIO_Init+0x1d8>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e004      	b.n	80014ee <HAL_GPIO_Init+0x1e2>
 80014e4:	2303      	movs	r3, #3
 80014e6:	e002      	b.n	80014ee <HAL_GPIO_Init+0x1e2>
 80014e8:	2301      	movs	r3, #1
 80014ea:	e000      	b.n	80014ee <HAL_GPIO_Init+0x1e2>
 80014ec:	2300      	movs	r3, #0
 80014ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f0:	f002 0203 	and.w	r2, r2, #3
 80014f4:	0092      	lsls	r2, r2, #2
 80014f6:	4093      	lsls	r3, r2
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014fe:	493b      	ldr	r1, [pc, #236]	; (80015ec <HAL_GPIO_Init+0x2e0>)
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	4937      	ldr	r1, [pc, #220]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
 8001524:	e006      	b.n	8001534 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	43db      	mvns	r3, r3
 800152e:	4933      	ldr	r1, [pc, #204]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001530:	4013      	ands	r3, r2
 8001532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	492d      	ldr	r1, [pc, #180]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	60cb      	str	r3, [r1, #12]
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800154e:	4b2b      	ldr	r3, [pc, #172]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	43db      	mvns	r3, r3
 8001556:	4929      	ldr	r1, [pc, #164]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001558:	4013      	ands	r3, r2
 800155a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4923      	ldr	r1, [pc, #140]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	491f      	ldr	r1, [pc, #124]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001580:	4013      	ands	r3, r2
 8001582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4919      	ldr	r1, [pc, #100]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800159e:	4b17      	ldr	r3, [pc, #92]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	4915      	ldr	r1, [pc, #84]	; (80015fc <HAL_GPIO_Init+0x2f0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	3301      	adds	r3, #1
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	fa22 f303 	lsr.w	r3, r2, r3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f47f aeaf 	bne.w	8001320 <HAL_GPIO_Init+0x14>
  }
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	372c      	adds	r7, #44	; 0x2c
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	10320000 	.word	0x10320000
 80015d4:	10310000 	.word	0x10310000
 80015d8:	10220000 	.word	0x10220000
 80015dc:	10210000 	.word	0x10210000
 80015e0:	10120000 	.word	0x10120000
 80015e4:	10110000 	.word	0x10110000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000
 80015f0:	40010800 	.word	0x40010800
 80015f4:	40010c00 	.word	0x40010c00
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	887b      	ldrh	r3, [r7, #2]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001618:	2301      	movs	r3, #1
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e001      	b.n	8001622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162e:	b480      	push	{r7}
 8001630:	b083      	sub	sp, #12
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]
 800163a:	4613      	mov	r3, r2
 800163c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800163e:	787b      	ldrb	r3, [r7, #1]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001644:	887a      	ldrh	r2, [r7, #2]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800164a:	e003      	b.n	8001654 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	460b      	mov	r3, r1
 8001668:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001670:	887a      	ldrh	r2, [r7, #2]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	041a      	lsls	r2, r3, #16
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43d9      	mvns	r1, r3
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	400b      	ands	r3, r1
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	611a      	str	r2, [r3, #16]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e26c      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8087 	beq.w	80017be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b0:	4b92      	ldr	r3, [pc, #584]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d00c      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016bc:	4b8f      	ldr	r3, [pc, #572]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d112      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
 80016c8:	4b8c      	ldr	r3, [pc, #560]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d4:	d10b      	bne.n	80016ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d6:	4b89      	ldr	r3, [pc, #548]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d06c      	beq.n	80017bc <HAL_RCC_OscConfig+0x12c>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d168      	bne.n	80017bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e246      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_OscConfig+0x76>
 80016f8:	4b80      	ldr	r3, [pc, #512]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a7f      	ldr	r2, [pc, #508]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	e02e      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b7b      	ldr	r3, [pc, #492]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7a      	ldr	r2, [pc, #488]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b78      	ldr	r3, [pc, #480]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a77      	ldr	r2, [pc, #476]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e01d      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0xbc>
 8001732:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a71      	ldr	r2, [pc, #452]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b6f      	ldr	r3, [pc, #444]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a6e      	ldr	r2, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e00b      	b.n	8001764 <HAL_RCC_OscConfig+0xd4>
 800174c:	4b6b      	ldr	r3, [pc, #428]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a6a      	ldr	r2, [pc, #424]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	6013      	str	r3, [r2, #0]
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a67      	ldr	r2, [pc, #412]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 800175e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d013      	beq.n	8001794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fcb6 	bl	80010dc <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fcb2 	bl	80010dc <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	; 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e1fa      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xe4>
 8001792:	e014      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fca2 	bl	80010dc <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fc9e 	bl	80010dc <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1e6      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ae:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x10c>
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d063      	beq.n	8001892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017ca:	4b4c      	ldr	r3, [pc, #304]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017d6:	4b49      	ldr	r3, [pc, #292]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d11c      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
 80017e2:	4b46      	ldr	r3, [pc, #280]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d116      	bne.n	800181c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ee:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d005      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d001      	beq.n	8001806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e1ba      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001806:	4b3d      	ldr	r3, [pc, #244]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4939      	ldr	r1, [pc, #228]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001816:	4313      	orrs	r3, r2
 8001818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181a:	e03a      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fc57 	bl	80010dc <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001832:	f7ff fc53 	bl	80010dc <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e19b      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001844:	4b2d      	ldr	r3, [pc, #180]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4927      	ldr	r1, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001860:	4313      	orrs	r3, r2
 8001862:	600b      	str	r3, [r1, #0]
 8001864:	e015      	b.n	8001892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <HAL_RCC_OscConfig+0x270>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186c:	f7ff fc36 	bl	80010dc <HAL_GetTick>
 8001870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff fc32 	bl	80010dc <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e17a      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	2b00      	cmp	r3, #0
 800189c:	d03a      	beq.n	8001914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d019      	beq.n	80018da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fc16 	bl	80010dc <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b4:	f7ff fc12 	bl	80010dc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e15a      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_OscConfig+0x26c>)
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018d2:	2001      	movs	r0, #1
 80018d4:	f000 fa9a 	bl	8001e0c <RCC_Delay>
 80018d8:	e01c      	b.n	8001914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_RCC_OscConfig+0x274>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e0:	f7ff fbfc 	bl	80010dc <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e6:	e00f      	b.n	8001908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e8:	f7ff fbf8 	bl	80010dc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d908      	bls.n	8001908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e140      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
 80018fa:	bf00      	nop
 80018fc:	40021000 	.word	0x40021000
 8001900:	42420000 	.word	0x42420000
 8001904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	4b9e      	ldr	r3, [pc, #632]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1e9      	bne.n	80018e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a6 	beq.w	8001a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001926:	4b97      	ldr	r3, [pc, #604]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10d      	bne.n	800194e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b94      	ldr	r3, [pc, #592]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	4a93      	ldr	r2, [pc, #588]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	4b91      	ldr	r3, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194a:	2301      	movs	r3, #1
 800194c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194e:	4b8e      	ldr	r3, [pc, #568]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001956:	2b00      	cmp	r3, #0
 8001958:	d118      	bne.n	800198c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800195a:	4b8b      	ldr	r3, [pc, #556]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a8a      	ldr	r2, [pc, #552]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001966:	f7ff fbb9 	bl	80010dc <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196e:	f7ff fbb5 	bl	80010dc <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b64      	cmp	r3, #100	; 0x64
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0fd      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001980:	4b81      	ldr	r3, [pc, #516]	; (8001b88 <HAL_RCC_OscConfig+0x4f8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x312>
 8001994:	4b7b      	ldr	r3, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a7a      	ldr	r2, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e02d      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x334>
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 0301 	bic.w	r3, r3, #1
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	f023 0304 	bic.w	r3, r3, #4
 80019c0:	6213      	str	r3, [r2, #32]
 80019c2:	e01c      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b05      	cmp	r3, #5
 80019ca:	d10c      	bne.n	80019e6 <HAL_RCC_OscConfig+0x356>
 80019cc:	4b6d      	ldr	r3, [pc, #436]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a6c      	ldr	r2, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6213      	str	r3, [r2, #32]
 80019e4:	e00b      	b.n	80019fe <HAL_RCC_OscConfig+0x36e>
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a63      	ldr	r2, [pc, #396]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff fb69 	bl	80010dc <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a0c:	e00a      	b.n	8001a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fb65 	bl	80010dc <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e0ab      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ee      	beq.n	8001a0e <HAL_RCC_OscConfig+0x37e>
 8001a30:	e014      	b.n	8001a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fb53 	bl	80010dc <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a38:	e00a      	b.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3a:	f7ff fb4f 	bl	80010dc <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e095      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a50:	4b4c      	ldr	r3, [pc, #304]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ee      	bne.n	8001a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a5c:	7dfb      	ldrb	r3, [r7, #23]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d105      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b48      	ldr	r3, [pc, #288]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 8081 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	4b42      	ldr	r3, [pc, #264]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 030c 	and.w	r3, r3, #12
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d061      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d146      	bne.n	8001b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8c:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x4fc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff fb23 	bl	80010dc <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff fb1f 	bl	80010dc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e067      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac0:	d108      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	492d      	ldr	r1, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a19      	ldr	r1, [r3, #32]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	430b      	orrs	r3, r1
 8001ae6:	4927      	ldr	r1, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aec:	4b27      	ldr	r3, [pc, #156]	; (8001b8c <HAL_RCC_OscConfig+0x4fc>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff faf3 	bl	80010dc <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001afa:	f7ff faef 	bl	80010dc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e037      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x46a>
 8001b18:	e02f      	b.n	8001b7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_RCC_OscConfig+0x4fc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff fadc 	bl	80010dc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff fad8 	bl	80010dc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e020      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x498>
 8001b46:	e018      	b.n	8001b7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e013      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	42420060 	.word	0x42420060

08001b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0d0      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d910      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f023 0207 	bic.w	r2, r3, #7
 8001bba:	4965      	ldr	r1, [pc, #404]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc2:	4b63      	ldr	r3, [pc, #396]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0b8      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bec:	4b59      	ldr	r3, [pc, #356]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	494d      	ldr	r1, [pc, #308]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d040      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b47      	ldr	r3, [pc, #284]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d115      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e07f      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d107      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c4e:	4b41      	ldr	r3, [pc, #260]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d109      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e073      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c5e:	4b3d      	ldr	r3, [pc, #244]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e06b      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f023 0203 	bic.w	r2, r3, #3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4936      	ldr	r1, [pc, #216]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c80:	f7ff fa2c 	bl	80010dc <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f7ff fa28 	bl	80010dc <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e053      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 020c 	and.w	r2, r3, #12
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d1eb      	bne.n	8001c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d210      	bcs.n	8001ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0207 	bic.w	r2, r3, #7
 8001cc6:	4922      	ldr	r1, [pc, #136]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b20      	ldr	r3, [pc, #128]	; (8001d50 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e032      	b.n	8001d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d008      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4916      	ldr	r1, [pc, #88]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d009      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	490e      	ldr	r1, [pc, #56]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d1e:	f000 f821 	bl	8001d64 <HAL_RCC_GetSysClockFreq>
 8001d22:	4602      	mov	r2, r0
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	091b      	lsrs	r3, r3, #4
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	490a      	ldr	r1, [pc, #40]	; (8001d58 <HAL_RCC_ClockConfig+0x1c8>)
 8001d30:	5ccb      	ldrb	r3, [r1, r3]
 8001d32:	fa22 f303 	lsr.w	r3, r2, r3
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_ClockConfig+0x1cc>)
 8001d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_ClockConfig+0x1d0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff f98a 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	40022000 	.word	0x40022000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08002688 	.word	0x08002688
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d002      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x30>
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d003      	beq.n	8001d9a <HAL_RCC_GetSysClockFreq+0x36>
 8001d92:	e027      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d96:	613b      	str	r3, [r7, #16]
      break;
 8001d98:	e027      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	0c9b      	lsrs	r3, r3, #18
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 8001da6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d010      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	0c5b      	lsrs	r3, r3, #17
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001dc6:	fb02 f203 	mul.w	r2, r2, r3
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e004      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0c      	ldr	r2, [pc, #48]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dd8:	fb02 f303 	mul.w	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	613b      	str	r3, [r7, #16]
      break;
 8001de2:	e002      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001de6:	613b      	str	r3, [r7, #16]
      break;
 8001de8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dea:	693b      	ldr	r3, [r7, #16]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	371c      	adds	r7, #28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	007a1200 	.word	0x007a1200
 8001e00:	08002698 	.word	0x08002698
 8001e04:	080026a8 	.word	0x080026a8
 8001e08:	003d0900 	.word	0x003d0900

08001e0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <RCC_Delay+0x34>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <RCC_Delay+0x38>)
 8001e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1e:	0a5b      	lsrs	r3, r3, #9
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	fb02 f303 	mul.w	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e28:	bf00      	nop
  }
  while (Delay --);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	60fa      	str	r2, [r7, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f9      	bne.n	8001e28 <RCC_Delay+0x1c>
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	20000004 	.word	0x20000004
 8001e44:	10624dd3 	.word	0x10624dd3

08001e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e041      	b.n	8001ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff f81e 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 fa6e 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d001      	beq.n	8001f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e035      	b.n	8001f6c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0201 	orr.w	r2, r2, #1
 8001f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_TIM_Base_Start_IT+0x90>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x4e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2a:	d004      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x4e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_TIM_Base_Start_IT+0x94>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d111      	bne.n	8001f5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d010      	beq.n	8001f6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f58:	e007      	b.n	8001f6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f042 0201 	orr.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40000400 	.word	0x40000400

08001f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0202 	mvn.w	r2, #2
 8001fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f9b4 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f9a7 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f9b6 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d122      	bne.n	8002030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d11b      	bne.n	8002030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0204 	mvn.w	r2, #4
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f98a 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f97d 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f98c 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b08      	cmp	r3, #8
 800203c:	d122      	bne.n	8002084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b08      	cmp	r3, #8
 800204a:	d11b      	bne.n	8002084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0208 	mvn.w	r2, #8
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2204      	movs	r2, #4
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f960 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 8002070:	e005      	b.n	800207e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f953 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f962 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b10      	cmp	r3, #16
 8002090:	d122      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0310 	and.w	r3, r3, #16
 800209c:	2b10      	cmp	r3, #16
 800209e:	d11b      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0210 	mvn.w	r2, #16
 80020a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2208      	movs	r2, #8
 80020ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f936 	bl	8002330 <HAL_TIM_IC_CaptureCallback>
 80020c4:	e005      	b.n	80020d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f929 	bl	800231e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f938 	bl	8002342 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0201 	mvn.w	r2, #1
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fc54 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d10e      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d107      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fa6b 	bl	8002606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d10e      	bne.n	800215c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b40      	cmp	r3, #64	; 0x40
 800214a:	d107      	bne.n	800215c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f8fc 	bl	8002354 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b20      	cmp	r3, #32
 8002168:	d10e      	bne.n	8002188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b20      	cmp	r3, #32
 8002176:	d107      	bne.n	8002188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f06f 0220 	mvn.w	r2, #32
 8002180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa36 	bl	80025f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_TIM_ConfigClockSource+0x1c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e0b4      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x186>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2202      	movs	r2, #2
 80021b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021e4:	d03e      	beq.n	8002264 <HAL_TIM_ConfigClockSource+0xd4>
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	f200 8087 	bhi.w	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 80021ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f2:	f000 8086 	beq.w	8002302 <HAL_TIM_ConfigClockSource+0x172>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	d87f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 80021fc:	2b70      	cmp	r3, #112	; 0x70
 80021fe:	d01a      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0xa6>
 8002200:	2b70      	cmp	r3, #112	; 0x70
 8002202:	d87b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002204:	2b60      	cmp	r3, #96	; 0x60
 8002206:	d050      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x11a>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d877      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b50      	cmp	r3, #80	; 0x50
 800220e:	d03c      	beq.n	800228a <HAL_TIM_ConfigClockSource+0xfa>
 8002210:	2b50      	cmp	r3, #80	; 0x50
 8002212:	d873      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b40      	cmp	r3, #64	; 0x40
 8002216:	d058      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x13a>
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d86f      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b30      	cmp	r3, #48	; 0x30
 800221e:	d064      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002220:	2b30      	cmp	r3, #48	; 0x30
 8002222:	d86b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d060      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002228:	2b20      	cmp	r3, #32
 800222a:	d867      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05c      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002230:	2b10      	cmp	r3, #16
 8002232:	d05a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x15a>
 8002234:	e062      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f000 f95e 	bl	8002506 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	609a      	str	r2, [r3, #8]
      break;
 8002262:	e04f      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6899      	ldr	r1, [r3, #8]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	f000 f947 	bl	8002506 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002286:	609a      	str	r2, [r3, #8]
      break;
 8002288:	e03c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	461a      	mov	r2, r3
 8002298:	f000 f8be 	bl	8002418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2150      	movs	r1, #80	; 0x50
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f915 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022a8:	e02c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f000 f8dc 	bl	8002474 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2160      	movs	r1, #96	; 0x60
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 f905 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e01c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f000 f89e 	bl	8002418 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f8f5 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022e8:	e00c      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 f8ec 	bl	80024d2 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e003      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002300:	e000      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
	...

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a25      	ldr	r2, [pc, #148]	; (8002410 <TIM_Base_SetConfig+0xa8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <TIM_Base_SetConfig+0x28>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d003      	beq.n	8002390 <TIM_Base_SetConfig+0x28>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a22      	ldr	r2, [pc, #136]	; (8002414 <TIM_Base_SetConfig+0xac>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d108      	bne.n	80023a2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <TIM_Base_SetConfig+0xa8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x52>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x52>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a17      	ldr	r2, [pc, #92]	; (8002414 <TIM_Base_SetConfig+0xac>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a07      	ldr	r2, [pc, #28]	; (8002410 <TIM_Base_SetConfig+0xa8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40000400 	.word	0x40000400

08002418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 030a 	bic.w	r3, r3, #10
 8002454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	621a      	str	r2, [r3, #32]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002474:	b480      	push	{r7}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	f023 0210 	bic.w	r2, r3, #16
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800249e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	031b      	lsls	r3, r3, #12
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	bf00      	nop
 80024ca:	371c      	adds	r7, #28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f043 0307 	orr.w	r3, r3, #7
 80024f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002506:	b480      	push	{r7}
 8002508:	b087      	sub	sp, #28
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002520:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	431a      	orrs	r2, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	4313      	orrs	r3, r2
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	609a      	str	r2, [r3, #8]
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002558:	2302      	movs	r3, #2
 800255a:	e041      	b.n	80025e0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a14      	ldr	r2, [pc, #80]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025a8:	d004      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d10c      	bne.n	80025ce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400

080025f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <__libc_init_array>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	2600      	movs	r6, #0
 800261c:	4d0c      	ldr	r5, [pc, #48]	; (8002650 <__libc_init_array+0x38>)
 800261e:	4c0d      	ldr	r4, [pc, #52]	; (8002654 <__libc_init_array+0x3c>)
 8002620:	1b64      	subs	r4, r4, r5
 8002622:	10a4      	asrs	r4, r4, #2
 8002624:	42a6      	cmp	r6, r4
 8002626:	d109      	bne.n	800263c <__libc_init_array+0x24>
 8002628:	f000 f822 	bl	8002670 <_init>
 800262c:	2600      	movs	r6, #0
 800262e:	4d0a      	ldr	r5, [pc, #40]	; (8002658 <__libc_init_array+0x40>)
 8002630:	4c0a      	ldr	r4, [pc, #40]	; (800265c <__libc_init_array+0x44>)
 8002632:	1b64      	subs	r4, r4, r5
 8002634:	10a4      	asrs	r4, r4, #2
 8002636:	42a6      	cmp	r6, r4
 8002638:	d105      	bne.n	8002646 <__libc_init_array+0x2e>
 800263a:	bd70      	pop	{r4, r5, r6, pc}
 800263c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002640:	4798      	blx	r3
 8002642:	3601      	adds	r6, #1
 8002644:	e7ee      	b.n	8002624 <__libc_init_array+0xc>
 8002646:	f855 3b04 	ldr.w	r3, [r5], #4
 800264a:	4798      	blx	r3
 800264c:	3601      	adds	r6, #1
 800264e:	e7f2      	b.n	8002636 <__libc_init_array+0x1e>
 8002650:	080026ac 	.word	0x080026ac
 8002654:	080026ac 	.word	0x080026ac
 8002658:	080026ac 	.word	0x080026ac
 800265c:	080026b0 	.word	0x080026b0

08002660 <memset>:
 8002660:	4603      	mov	r3, r0
 8002662:	4402      	add	r2, r0
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <memset+0xa>
 8002668:	4770      	bx	lr
 800266a:	f803 1b01 	strb.w	r1, [r3], #1
 800266e:	e7f9      	b.n	8002664 <memset+0x4>

08002670 <_init>:
 8002670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002672:	bf00      	nop
 8002674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002676:	bc08      	pop	{r3}
 8002678:	469e      	mov	lr, r3
 800267a:	4770      	bx	lr

0800267c <_fini>:
 800267c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267e:	bf00      	nop
 8002680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002682:	bc08      	pop	{r3}
 8002684:	469e      	mov	lr, r3
 8002686:	4770      	bx	lr
